{"version":3,"file":"config.js","sourceRoot":"","sources":["../src/config.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAE1B,MAAM,IAAI,GAAG;IACZ,kBAAkB,EAAE,EAAE;IACtB,aAAa,EAAE,EAAE;CACjB,CAAC;AASF,SAAgB,MAAM,CAAC,GAAe;IACrC,IAAI,GAAG,IAAI,qBAAqB;QAAE,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACpE,IAAI,GAAG,IAAI,gBAAgB;QAAE,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC;IAC1D,OAAO,EAAE,CAAC;AACX,CAAC;AAJD,wBAIC;AASD,SAAgB,MAAM,CAAC,GAAe,EAAE,KAAa;IACpD,IAAI,GAAG,IAAI,qBAAqB;QAAE,IAAI,CAAC,oBAAoB,CAAC,GAAG,KAAK,CAAC;IACrE,IAAI,GAAG,IAAI,gBAAgB;QAAE,IAAI,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC;AAC5D,CAAC;AAHD,wBAGC;AAQD,SAAgB,UAAU,CAAC,IAAY,IAAS,CAAC;AAAjD,gCAAiD;AAGjD,SAAgB,OAAO;IACtB,OAAO,IAAI,CAAC;AACb,CAAC;AAFD,0BAEC;AASM,KAAK,UAAU,QAAQ,CAAC,GAAe;IAC7C,IAAI,GAAG,KAAK,qBAAqB,EAAE;QAClC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;YAChF,MAAM,GAAG,CAAC;QACX,CAAC,CAAC,CAAC;QACH,MAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,EAAE;YAC7D,IAAI,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC;gBAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;YACnF,MAAM,GAAG,CAAC;QACX,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KACpD;AACF,CAAC;AAdD,4BAcC","sourcesContent":["import axios from \"axios\";\r\n\r\nconst keys = {\r\n\tsoundcloudClientId: \"\",\r\n\tspotifyAPIKey: \"\",\r\n};\r\n\r\nexport type BarbaraKey = \"SOUNDCLOUD_CLIENTID\" | \"SPOTIFY_APIKEY\";\r\n\r\n/**\r\n * Return an authentication key\r\n *\r\n * @param key Key identifier\r\n */\r\nexport function getKey(key: BarbaraKey) {\r\n\tif (key == \"SOUNDCLOUD_CLIENTID\") return keys[\"soundcloudClientId\"];\r\n\tif (key == \"SPOTIFY_APIKEY\") return keys[\"spotifyAPIKey\"];\r\n\treturn \"\";\r\n}\r\n\r\n/**\r\n * Set an authentication key (e.g. Spotify API key).\r\n * Use this function before invoking other Barbara-related stuff so Barbara can use the given keys.\r\n *\r\n * @param key Key identifier\r\n * @param value Key value\r\n */\r\nexport function setKey(key: BarbaraKey, value: string): void {\r\n\tif (key == \"SOUNDCLOUD_CLIENTID\") keys[\"soundcloudClientId\"] = value;\r\n\tif (key == \"SPOTIFY_APIKEY\") keys[\"spotifyAPIKey\"] = value;\r\n}\r\n\r\n/**\r\n * Set a file path for reading authentication keys.\r\n * Note: Barbara will only read once from file every time its run\r\n *\r\n * @param path Relative file path\r\n */\r\nexport function setKeyFile(path: string): void {}\r\n\r\n/** Log debug information? */\r\nexport function isDebug() {\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Return a free authentication key (e.g. SoundCloud client ID)\r\n * You can use this when setting a key instead of providing your own (although it is still recommended).\r\n *\r\n * Some code was ripped from play-dl\r\n * @async\r\n */\r\nexport async function freeKeys(key: BarbaraKey) {\r\n\tif (key === \"SOUNDCLOUD_CLIENTID\") {\r\n\t\tconst { data } = await axios.get(\"https://soundcloud.com/\").catch((err: Error) => {\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t\tconst urls: string[] = [];\r\n\t\tdata.split('<script crossorigin src=\"').forEach((r: string) => {\r\n\t\t\tif (r.startsWith(\"https\")) urls.push(r.split('\"')[0]);\r\n\t\t});\r\n\t\tconst { data: data2 } = await axios.get(urls[urls.length - 1]).catch((err: Error) => {\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t\treturn data2.split(',client_id:\"')[1].split('\"')[0];\r\n\t}\r\n}\r\n"]}