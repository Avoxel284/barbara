{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../src/lib/auth.ts"],"names":[],"mappings":";;;;;;AAOA,kDAA0B;AAE1B,wBAA4B;AAC5B,qCAAmD;AACnD,iCAAkC;AAE3B,KAAK,UAAU,eAAe,CAAC,IAAY;IACjD,IAAI,IAAI,KAAK,SAAS,EAAE;QACvB,IAAI,QAAQ,GAAG,IAAA,eAAM,EAAC,kBAAkB,CAAC,CAAC;QAC1C,IAAI,YAAY,GAAG,IAAA,eAAM,EAAC,sBAAsB,CAAC,CAAC;QAClD,IAAI,WAAW,GAAG,IAAA,eAAM,EAAC,qBAAqB,CAAC,CAAC;QAChD,IAAI,WAAW,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,IAAA,eAAM,EAAC,qBAAqB,CAAC,CAAC,QAAQ,EAAE,CAAC;YAAE,OAAO;QAC3F,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY;YAAE,OAAO;QAEvC,IAAA,eAAM,EAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;QAE1C,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK;aACxB,IAAI,CAAC,wCAAwC,EAAE,+BAA+B,EAAE;YAChF,OAAO,EAAE;gBACR,aAAa,EAAE,SAAS,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,IAAI,YAAY,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACvF,cAAc,EAAE,mCAAmC;aACnD;SACD,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACd,IAAA,eAAQ,EAAC,GAAG,CAAC,CAAC;YAEd,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,IAAI;YAAE,OAAO;QAElB,IAAA,gBAAO,EAAC;YACP,mBAAmB,EAAE,IAAI,CAAC,YAAY;YAEtC,mBAAmB,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI;YAC9D,iBAAiB,EAAE,IAAI,CAAC,UAAU;SAClC,CAAC,CAAC;KACH;IAED,OAAO;AACR,CAAC;AAjCD,0CAiCC;AAMM,KAAK,UAAU,aAAa,CAAC,OAAiB;IACpD,IAAI,OAAO,KAAK,UAAO,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;QAC5C,IAAA,gBAAO,EAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;KACpC;AACF,CAAC;AAJD,sCAIC","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module\r\n *\r\n * Functions for authenticating keys\r\n */\r\n\r\nimport axios from \"axios\";\r\nimport { config } from \"process\";\r\nimport { Service } from \".\";\r\nimport { getKey, setKey, setKeys } from \"./config\";\r\nimport { debugLog } from \"./util\";\r\n\r\nexport async function authenticateKey(key0: string): Promise<object | undefined> {\r\n\tif (key0 === \"SPOTIFY\") {\r\n\t\tlet clientId = getKey(\"SPOTIFY_CLIENTID\");\r\n\t\tlet clientSecret = getKey(\"SPOTIFY_CLIENTSECRET\");\r\n\t\tlet accessToken = getKey(\"SPOTIFY_ACCESSTOKEN\");\r\n\t\tif (accessToken || Date.now() < parseInt(getKey(\"SPOTIFY_TOKENEXPIRY\").toString())) return;\r\n\t\tif (!clientId || !clientSecret) return;\r\n\t\t// prevent rerunning this function when already running\r\n\t\tsetKey(\"SPOTIFY_ACCESSTOKEN\", \"_pending\");\r\n\r\n\t\tlet { data } = await axios\r\n\t\t\t.post(\"https://accounts.spotify.com/api/token\", `grant_type=client_credentials`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString(\"base64\")}`,\r\n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tdebugLog(err);\r\n\t\t\t\t// hacky, yea.. but it works\r\n\t\t\t\treturn { data: null };\r\n\t\t\t});\r\n\t\tif (!data) return;\r\n\r\n\t\tsetKeys({\r\n\t\t\tSPOTIFY_ACCESSTOKEN: data.access_token,\r\n\t\t\t// allow a minute for refreshing the token\r\n\t\t\tSPOTIFY_TOKENEXPIRY: Date.now() + (data.expires_in - 1) * 1000,\r\n\t\t\tSPOTIFY_TOKENTYPE: data.token_type,\r\n\t\t});\r\n\t}\r\n\r\n\treturn;\r\n}\r\n\r\n/**\r\n * Automatically refresh all authenticated service keys.\r\n * If `CONFIG_AUTOREFRESH` is true, this will occur automatically.\r\n */\r\nexport async function refreshTokens(service?: Service) {\r\n\tif (service === Service.spotify || !service) {\r\n\t\tsetKeys(authenticateKey(\"SPOTIFY\"));\r\n\t}\r\n}\r\n"]}