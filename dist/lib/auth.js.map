{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../src/lib/auth.ts"],"names":[],"mappings":";;;;;;AAOA,kDAA0B;AAC1B,wBAA4B;AAC5B,qCAAkC;AAG3B,KAAK,UAAU,eAAe,CAAC,IAAY;IACjD,IAAI,IAAI,KAAK,SAAS,EAAE;QACvB,IAAI,WAAW,GAAG,IAAA,eAAM,EAAC,qBAAqB,CAAC,CAAC;QAChD,IAAI,QAAQ,GAAG,IAAA,eAAM,EAAC,kBAAkB,CAAC,CAAC;QAC1C,IAAI,YAAY,GAAG,IAAA,eAAM,EAAC,sBAAsB,CAAC,CAAC;QAClD,IAAI,WAAW;YAAE,OAAO;QACxB,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY;YAAE,OAAO;QAEvC,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK;aACxB,IAAI,CAAC,wCAAwC,EAAE;YAC/C,UAAU,EAAE,oBAAoB;YAChC,OAAO,EAAE;gBACR,aAAa,EAAE,SAAS,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,IAAI,YAAY,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;aACvF;SACD,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACd,MAAM,GAAG,CAAC;QACX,CAAC,CAAC,CAAC;QAEJ,OAAO;YACN,gBAAgB,EAAE,EAAE;YACpB,mBAAmB,EAAE,IAAI,CAAC,YAAY;YAEtC,mBAAmB,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI;YAC9D,iBAAiB,EAAE,IAAI,CAAC,UAAU;SAClC,CAAC;KACF;IAED,OAAO;AACR,CAAC;AA7BD,0CA6BC;AAMM,KAAK,UAAU,aAAa,CAAC,OAAiB;IACpD,IAAI,OAAO,KAAK,UAAO,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;QAC5C,eAAe,CAAC,SAAS,CAAC,CAAC;KAC3B;AACF,CAAC;AAJD,sCAIC;AAED,CAAC,KAAK,IAAI,EAAE;IACX,IAAI,IAAA,eAAM,EAAC,oBAAoB,CAAC,EAAE;KAEjC;AACF,CAAC,CAAC,EAAE,CAAC","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module\n *\n * Functions for authenticating keys\n */\n\nimport axios from \"axios\";\nimport { Service } from \".\";\nimport { getKey } from \"./config\";\nimport { debugLog } from \"./util\";\n\nexport async function authenticateKey(key0: string) {\n\tif (key0 === \"SPOTIFY\") {\n\t\tlet accessToken = getKey(\"SPOTIFY_ACCESSTOKEN\");\n\t\tlet clientId = getKey(\"SPOTIFY_CLIENTID\");\n\t\tlet clientSecret = getKey(\"SPOTIFY_CLIENTSECRET\");\n\t\tif (accessToken) return;\n\t\tif (!clientId || !clientSecret) return;\n\n\t\tlet { data } = await axios\n\t\t\t.post(\"https://accounts.spotify.com/api/token\", {\n\t\t\t\tgrant_type: \"client_credentials\",\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString(\"base64\")}`,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tthrow err;\n\t\t\t});\n\n\t\treturn {\n\t\t\tSPOTIFY_CLIENTID: \"\",\n\t\t\tSPOTIFY_ACCESSTOKEN: data.access_token,\n\t\t\t// Allow a minute for refreshing the token\n\t\t\tSPOTIFY_TOKENEXPIRY: Date.now() + (data.expires_in - 1) * 1000,\n\t\t\tSPOTIFY_TOKENTYPE: data.token_type,\n\t\t};\n\t}\n\n\treturn;\n}\n\n/**\n * Automatically refresh all authenticated service keys.\n * If `CONFIG_AUTOREFRESH` is true, this will occur automatically.\n */\nexport async function refreshTokens(service?: Service) {\n\tif (service === Service.spotify || !service) {\n\t\tauthenticateKey(\"SPOTIFY\");\n\t}\n}\n\n(async () => {\n\tif (getKey(\"CONFIG_AUTOREFRESH\")) {\n\t\t// setInterval()\n\t}\n})();\n"]}