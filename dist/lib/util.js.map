{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/lib/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module\r\n */\r\n\r\nimport { getKey } from \"./config\";\r\n\r\n/**\r\n * Returns a random integer between two given integers\r\n * @param min Minimum\r\n * @param max Maximum\r\n */\r\nexport function getRandomInt(min: number, max: number): number {\r\n\tmin = Math.ceil(min);\r\n\tmax = Math.floor(max);\r\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Debug logging function for internal use\r\n *\r\n * @param content Parameter that can accept variable amount of content that gets logged\r\n */\r\nexport function debugLog(...content: any) {\r\n\tif (!getKey(\"CONFIG_DEBUG\")) return;\r\n\tconsole.log(`\\u001b[36;1m[ Barbara Debug ]\\u001b[0m`, arguments[0]);\r\n\tfor (let i = 1; arguments.length > i; i++) {\r\n\t\tconsole.log(arguments[i]);\r\n\t}\r\n}\r\n\r\n/**\r\n * Log warning in console\r\n *\r\n * @param content Parameter that can accept variable amount of content that gets logged\r\n */\r\nexport function warnLog(...content: any) {\r\n\tconsole.log(`\\u001b[33m[ Barbara Warning ]\\u001b[0m`, arguments[0]);\r\n\tfor (let i = 1; arguments.length > i; i++) {\r\n\t\tconsole.log(arguments[i]);\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a timestamp such as `3:10`, `45:32` or `132:44:19` from a given amount of seconds\r\n */\r\nexport function getTimeFromSeconds(time: number) {\r\n\tlet hrs = ~~(time / 3600);\r\n\tlet mins = ~~((time % 3600) / 60);\r\n\tlet secs = ~~time % 60;\r\n\tlet ret = \"\";\r\n\tif (hrs > 0) ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\r\n\r\n\tret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\r\n\tret += \"\" + secs;\r\n\treturn ret;\r\n}\r\n\r\n/**\r\n * Returns seconds from a given timestamp such as `3:10`, `45:32` or `132:44:19`\r\n */\r\nexport function getSecondsFromTime(time: string) {\r\n\tif (!time) return 0;\r\n\tconst args = time.split(\":\");\r\n\r\n\tswitch (args.length) {\r\n\t\tcase 3:\r\n\t\t\treturn parseInt(args[0]) * 60 * 60 + parseInt(args[1]) * 60 + parseInt(args[2]);\r\n\t\t\tbreak;\r\n\r\n\t\tcase 2:\r\n\t\t\treturn parseInt(args[0]) * 60 + parseInt(args[1]);\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\treturn parseInt(args[0]);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n"]}