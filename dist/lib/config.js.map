{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/lib/config.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module\r\n *\r\n * Functions for getting/setting keys and other configuration\r\n */\r\n\r\nimport axios from \"axios\";\r\nimport fs from \"fs\";\r\nimport { authenticateKey } from \"./auth\";\r\nimport { debugLog, warnLog } from \"./util\";\r\n\r\nconst keys: any = {\r\n\tSOUNDCLOUD: {\r\n\t\tCLIENTID: \"\",\r\n\t},\r\n\tSPOTIFY: {\r\n\t\tCLIENTID: \"\",\r\n\t\tCLIENTSECRET: \"\",\r\n\t\tACCESSTOKEN: \"\",\r\n\t\tTOKENTYPE: \"\",\r\n\t\tTOKENEXPIRY: \"\",\r\n\t\tMARKETCODE: \"AU\",\r\n\t},\r\n\tYOUTUBE: {\r\n\t\tCOOKIE: \"\",\r\n\t\tINVIDIOUSSITE: \"https://vid.puffyan.us\",\r\n\t},\r\n\tGENIUS: {\r\n\t\tTOKEN: \"\",\r\n\t\tLYRICSCACHING: true,\r\n\t},\r\n\tCONFIG: {\r\n\t\tDEBUG: false,\r\n\t\tFILE: \"\",\r\n\t\tAUTOREFRESH: true,\r\n\t},\r\n};\r\n\r\n// type BarbaraKeyIdentifiers {\r\n// \"SoundCloudClientID\" = \"SOUNDCLOUD_CLIENTID\",\r\n// \"SpotifyAPIKey\" = \"SPOTIFY_APIKEY\",\r\n// \"SpotifyClientID\" = \"SPOTIFY_CLIENTID\",\r\n// \"SpotifyClientSecret\" = \"SPOTIFY_CLIENTSECRET\",\r\n// \"SpotifyAuthorizationCode\" = \"SPOTIFY_AUTHORIZATIONCODE\",\r\n// \"SpotifyAccessToken\" = \"SPOTIFY_ACCESSTOKEN\",\r\n// \"SpotifyRefreshToken\" = \"SPOTIFY_REFRESHTOKEN\",\r\n// \"SpotifyTokenType\" = \"SPOTIFY_TOKENTYPE\",\r\n// \"SpotifyTokenExpiry\" = \"SPOTIFY_TOKENEXPIRY\",\r\n// \"SpotifyMarketCode\" = \"SPOTIFY_MARKETCODE\",\r\n// \"ConfigDebug\" = \"CONFIG_DEBUG\",\r\n// \"ConfigFile\" = \"CONFIG_FILE\",\r\n// }\r\n\r\n/**\r\n * Return an authentication key.\r\n * A full reference of key names can be found on the cheatsheet.\r\n *\r\n * @example\r\n * ```\r\n * // Get key for Spotify Client ID\r\n * getKey(\"SPOTIFY_CLIENTID\");\r\n * ```\r\n *\r\n * @param key Key identifier in the format of `<SERVICE>_<KEYIDENTIFIER>`\r\n */\r\nexport function getKey(key: string): boolean | string {\r\n\tconst k: string[] = key.split(\"_\");\r\n\tif (keys?.[k[0]]?.[k[1]] === undefined) throw new Error(\"Cannot find key to get: \" + key);\r\n\treturn keys[k[0]][k[1]];\r\n}\r\n\r\n/**\r\n * Set an authentication key (e.g. Spotify API key).\r\n * A full reference of key names can be found on the cheatsheet.\r\n *\r\n * **Use this function to set keys before invoking other Barbara-related stuff so Barbara can use the given keys.**\r\n *\r\n * @example\r\n * ```\r\n * // Set key for SoundCloud Client ID\r\n * setKey(\"SOUNDCLOUD_CLIENTID\", \"when will soundcloud open dev program again ðŸ¤”\");\r\n * ```\r\n *\r\n * @param key Key identifier in the format of `<SERVICE>_<KEYIDENTIFIER>`\r\n * @param value Key value\r\n */\r\nexport function setKey(key: string, value: string): void {\r\n\tconst k: string[] = key.split(\"_\");\r\n\tif (value === undefined) warnLog(`Value when setting ${k[0]}_${k[1]} is undefined!`);\r\n\tif (keys?.[k[0]]?.[k[1]] === undefined) throw new Error(\"Cannot find key to set: \" + key);\r\n\tkeys[k[0]][k[1]] = value;\r\n\tauthenticateKey(k[0]);\r\n}\r\n\r\n/**\r\n * Set authentication keys in bulk. Note: will overwrite specified keys.\r\n * A full reference of key names can be found on the cheatsheet.\r\n *\r\n * **Use this function to set keys before invoking other Barbara-related stuff so Barbara can use the given keys.**\r\n *\r\n * @example\r\n * ```\r\n * setKeys({\r\n * \t// Supports underscore format...\r\n * \t\"SOUNDCLOUD_CLIENTID\": \"1234567890\",\r\n * \t// ... or hierarchical format\r\n * \t\"SPOTIFY\": {\r\n * \t\tCLIENTID: \"1234567890\"\r\n * \t}\r\n * })\r\n * ```\r\n *\r\n * @param ks Object containing keys\r\n */\r\nexport function setKeys(ks: object): void {\r\n\tfor (let [a, b] of Object.entries(ks)) {\r\n\t\ta = a.toUpperCase();\r\n\t\t// underscore format\r\n\t\tif (a.includes(\"_\") && typeof b !== \"object\") {\r\n\t\t\tlet k = a.split(\"_\");\r\n\t\t\t// Skip if doesn't exist\r\n\t\t\tk[0] = k[0].toUpperCase();\r\n\t\t\tk[1] = k[1].toUpperCase();\r\n\t\t\tif (keys[k[0]]?.[k[1]] === undefined) continue;\r\n\t\t\tif (b === undefined) warnLog(`Value when setting ${k[0]}_${k[1]} is undefined!`);\r\n\t\t\tkeys[k[0]][k[1]] = b;\r\n\t\t\tauthenticateKey(k[0]);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t// object format\r\n\t\tif (keys[a] === undefined) continue;\r\n\t\tfor (let [c, v] of Object.entries(b)) {\r\n\t\t\tc = c.toUpperCase();\r\n\t\t\t// Skip if doesn't exist\r\n\t\t\tif (keys[a]?.[c] === undefined) continue;\r\n\t\t\tif (v === undefined) warnLog(`Value when setting ${a}_${c} is undefined!`);\r\n\t\t\tkeys[a][c] = v;\r\n\t\t\tauthenticateKey(a);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Read a configuration file and append to authenticaton keys.\r\n *\r\n * @param path Path to configuration file\r\n * @param overwrite Overwrite keys that have been manually set? **Defaults to true.**\r\n */\r\nexport function setKeyFile(path: string, overwrite: boolean = true): void {\r\n\tif (!path || !path.match(/^(.+)\\/([^\\/]+)$/))\r\n\t\tthrow \"Given Barbara key configuration file path is invalid!\";\r\n\r\n\ttry {\r\n\t\tlet fileContents = fs.readFileSync(path, { encoding: \"utf-8\" });\r\n\t\tif (!fileContents) throw \"Specified configuration file is empty!\";\r\n\t\tfileContents = JSON.parse(fileContents);\r\n\r\n\t\tfor (let [a, b] of Object.entries(fileContents)) {\r\n\t\t\ta = a.toUpperCase();\r\n\t\t\tif (keys[a] === undefined) continue;\r\n\t\t\tfor (let [c, v] of Object.entries(b)) {\r\n\t\t\t\tc = c.toUpperCase();\r\n\t\t\t\t// Skip if doesn't exist\r\n\t\t\t\tif (keys[a]?.[c] === undefined) continue;\r\n\t\t\t\t// Check if already set\r\n\t\t\t\tif (keys[a][c] && overwrite == false) continue;\r\n\t\t\t\tkeys[a][c] = v;\r\n\t\t\t\tauthenticateKey(a);\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.error(`An error occurred when attempting to read config file:`, err);\r\n\t}\r\n\r\n\tkeys[\"CONFIG\"][\"FILE\"] = path;\r\n}\r\n\r\n/**\r\n * Return a free authentication key (e.g. SoundCloud client ID).\r\n * You can use this when setting a key instead of providing your own.\r\n * A full reference of key names can be found on the cheatsheet.\r\n *\r\n * @example\r\n * ```\r\n * // Get a free SoundCloud client ID and set it\r\n * barbara.setKey(\"SOUNDCLOUD_CLIENTID\", await barbara.freeKey(\"SOUNDCLOUD_CLIENTID\"));\r\n *\r\n * // Get a better Invidious API and set it\r\n * barbara.setKey(\"YOUTUBE_INVIDIOUSAPI\", await barbara.freeKey(\"YOUTUBE_INVIDIOUSAPI\"));\r\n * ```\r\n *\r\n * Some code was ripped from play-dl\r\n * @async **Function is asynchronous!**\r\n */\r\nexport async function freeKey(key: string) {\r\n\tconst k: string[] = key.split(\"_\");\r\n\tif (keys?.[k[0]]?.[k[1]] == null) throw new Error(\"Cannot find key: \" + key);\r\n\r\n\tif (k[0] === \"SOUNDCLOUD\") {\r\n\t\tif (k[1] === \"CLIENTID\") {\r\n\t\t\tconst { data } = await axios.get(\"https://soundcloud.com/\").catch((err: Error) => {\r\n\t\t\t\tconsole.error(\"An error occurred when attempting to fetch SoundCloud free key:\");\r\n\t\t\t\tthrow err;\r\n\t\t\t});\r\n\t\t\tconst urls: string[] = [];\r\n\t\t\tdata.split('<script crossorigin src=\"').forEach((r: string) => {\r\n\t\t\t\tif (r.startsWith(\"https\")) urls.push(r.split('\"')[0]);\r\n\t\t\t});\r\n\t\t\tconst { data: data2 } = await axios.get(urls[urls.length - 1]).catch((err: Error) => {\r\n\t\t\t\tthrow err;\r\n\t\t\t});\r\n\t\t\treturn data2.split(',client_id:\"')[1].split('\"')[0];\r\n\t\t}\r\n\t}\r\n\r\n\tif (k[0] === \"YOUTUBE\") {\r\n\t\tif (k[1] === \"INVIDIOUSSITE\") {\r\n\t\t\tconst { data } = await axios\r\n\t\t\t\t.get(`https://api.invidious.io/instances.json?pretty=0&sort_by=type,users`)\r\n\t\t\t\t.catch((err: Error) => {\r\n\t\t\t\t\tconsole.error(\"An error occurred when attempting to fetch Invidious api url:\");\r\n\t\t\t\t\tthrow err;\r\n\t\t\t\t});\r\n\t\t\tif (!data) return;\r\n\r\n\t\t\tconst urls: string[] = [];\r\n\t\t\tdata.forEach((a: any) => {\r\n\t\t\t\tif (a[1].api) urls.push(a[1].uri);\r\n\t\t\t});\r\n\t\t\treturn urls[0];\r\n\t\t}\r\n\t}\r\n\r\n\tthrow new Error(\"No free authentication key can be found\");\r\n}\r\n"]}