{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/lib/config.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module\n *\n * Functions for getting/setting keys and other configuration\n */\n\nimport axios from \"axios\";\nimport fs from \"fs\";\nimport { debugLog } from \"./util\";\n\nconst keys: any = {\n\tSOUNDCLOUD: {\n\t\tCLIENTID: \"\",\n\t},\n\tSPOTIFY: {\n\t\tAPIKEY: \"\",\n\t\tCLIENTID: \"\",\n\t\tCLIENTSECRET: \"\",\n\t\tAUTHORIZATIONCODE: \"\",\n\t\tACCESSTOKEN: \"\",\n\t\tREFRESHTOKEN: \"\",\n\t\tTOKENTYPE: \"\",\n\t\tEXPIRY: \"\",\n\t\tMARKETCODE: \"\",\n\t},\n\tYOUTUBE: {\n\t\tCOOKIE: \"\",\n\t\tINVIDIOUSSITE: \"https://vid.puffyan.us\",\n\t},\n\tCONFIG: {\n\t\tDEBUG: false,\n\t\tFILE: \"\",\n\t},\n};\n\n// type BarbaraKeyIdentifiers {\n// \"SoundCloudClientID\" = \"SOUNDCLOUD_CLIENTID\",\n// \"SpotifyAPIKey\" = \"SPOTIFY_APIKEY\",\n// \"SpotifyClientID\" = \"SPOTIFY_CLIENTID\",\n// \"SpotifyClientSecret\" = \"SPOTIFY_CLIENTSECRET\",\n// \"SpotifyAuthorizationCode\" = \"SPOTIFY_AUTHORIZATIONCODE\",\n// \"SpotifyAccessToken\" = \"SPOTIFY_ACCESSTOKEN\",\n// \"SpotifyRefreshToken\" = \"SPOTIFY_REFRESHTOKEN\",\n// \"SpotifyTokenType\" = \"SPOTIFY_TOKENTYPE\",\n// \"SpotifyTokenExpiry\" = \"SPOTIFY_TOKENEXPIRY\",\n// \"SpotifyMarketCode\" = \"SPOTIFY_MARKETCODE\",\n// \"ConfigDebug\" = \"CONFIG_DEBUG\",\n// \"ConfigFile\" = \"CONFIG_FILE\",\n// }\n\n/**\n * Return an authentication key.\n * A full reference of key names can be found on the cheatsheet.\n *\n * @example\n * ```\n * // Get key for Spotify Client ID\n * getKey(\"SPOTIFY_CLIENTID\");\n * ```\n *\n * @param key Key identifier in the format of `<SERVICE>_<KEYIDENTIFIER>`\n */\nexport function getKey(key: string): boolean | string {\n\tconst k: string[] = key.split(\"_\");\n\tif (keys?.[k[0]]?.[k[1]] == null) throw new Error(\"Cannot find key to get: \" + key);\n\treturn keys[k[0]][k[1]];\n}\n\n/**\n * Set an authentication key (e.g. Spotify API key).\n * A full reference of key names can be found on the cheatsheet.\n *\n * **Use this function to set keys before invoking other Barbara-related stuff so Barbara can use the given keys.**\n *\n * @example\n * ```\n * // Set key for SoundCloud Client ID\n * setKey(\"SOUNDCLOUD_CLIENTID\", \"when will soundcloud open dev program again ðŸ¤”\");\n * ```\n *\n * @param key Key identifier in the format of `<SERVICE>_<KEYIDENTIFIER>`\n * @param value Key value\n */\nexport function setKey(key: string, value: string): void {\n\tconst k: string[] = key.split(\"_\");\n\tif (keys?.[k[0]]?.[k[1]] == null) throw new Error(\"Cannot find key to set: \" + key);\n\tkeys[k[0]][k[1]] = value;\n}\n\n/**\n * Read a configuration file and append to authenticaton keys.\n *\n * @param path Path to configuration file\n * @param overwrite Overwrite keys that have been manually set? **Defaults to true.**\n */\nexport function setKeyFile(path: string, overwrite: boolean = true): void {\n\tif (!path || !path.match(/^(.+)\\/([^\\/]+)$/))\n\t\tthrow \"Given Barbara key configuration file path is invalid!\";\n\n\ttry {\n\t\tlet fileContents = fs.readFileSync(path, { encoding: \"utf-8\" });\n\t\tif (!fileContents) throw \"Specified configuration file is empty!\";\n\t\tfileContents = JSON.parse(fileContents);\n\n\t\tfor (let [a, b] of Object.entries(fileContents)) {\n\t\t\ta = a.toUpperCase();\n\t\t\tif (keys[a] === undefined) continue;\n\t\t\tfor (let [c, v] of Object.entries(b)) {\n\t\t\t\tc = c.toUpperCase();\n\t\t\t\t// Skip if doesn't exist\n\t\t\t\tif (keys[a][c] === undefined) continue;\n\t\t\t\t// Check if already set\n\t\t\t\tif (keys[a][c] && overwrite == false) continue;\n\t\t\t\tkeys[a][c] = v;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\tconsole.error(`An error occurred when attempting to read config file:`, err);\n\t}\n\n\tkeys[\"CONFIG\"][\"FILE\"] = path;\n}\n\n/**\n * Return a free authentication key (e.g. SoundCloud client ID).\n * You can use this when setting a key instead of providing your own.\n * A full reference of key names can be found on the cheatsheet.\n *\n * @example\n * ```\n * // Get a free SoundCloud client ID and set it\n * barbara.setKey(\"SOUNDCLOUD_CLIENTID\", await barbara.freeKey(\"SOUNDCLOUD_CLIENTID\"));\n *\n * // Get a better Invidious API and set it\n * barbara.setKey(\"YOUTUBE_INVIDIOUSAPI\", await barbara.freeKey(\"YOUTUBE_INVIDIOUSAPI\"));\n * ```\n *\n * Some code was ripped from play-dl\n * @async **Function is asynchronous!**\n */\nexport async function freeKey(key: string) {\n\tconst k: string[] = key.split(\"_\");\n\tif (keys?.[k[0]]?.[k[1]] == null) throw new Error(\"Cannot find key: \" + key);\n\n\tif (k[0] === \"SOUNDCLOUD\") {\n\t\tif (k[1] === \"CLIENTID\") {\n\t\t\tconst { data } = await axios.get(\"https://soundcloud.com/\").catch((err: Error) => {\n\t\t\t\tconsole.error(\"An error occurred when attempting to fetch SoundCloud free key:\");\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t\tconst urls: string[] = [];\n\t\t\tdata.split('<script crossorigin src=\"').forEach((r: string) => {\n\t\t\t\tif (r.startsWith(\"https\")) urls.push(r.split('\"')[0]);\n\t\t\t});\n\t\t\tconst { data: data2 } = await axios.get(urls[urls.length - 1]).catch((err: Error) => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t\treturn data2.split(',client_id:\"')[1].split('\"')[0];\n\t\t}\n\t}\n\n\tif (k[0] === \"YOUTUBE\") {\n\t\tif (k[1] === \"INVIDIOUSSITE\") {\n\t\t\tconst { data } = await axios\n\t\t\t\t.get(`https://api.invidious.io/instances.json?pretty=0&sort_by=type,users`)\n\t\t\t\t.catch((err: Error) => {\n\t\t\t\t\tconsole.error(\"An error occurred when attempting to fetch Invidious api url:\");\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\t\t\tif (!data) return;\n\n\t\t\tconst urls: string[] = [];\n\t\t\tdata.forEach((a: any) => {\n\t\t\t\tif (a[1].api) urls.push(a[1].uri);\n\t\t\t});\n\t\t\treturn urls[0];\n\t\t}\n\t}\n\n\tthrow new Error(\"No free authentication key can be found\");\n}\n"]}