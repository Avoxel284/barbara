{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/lib/index.ts"],"names":[],"mappings":";;;;;;AAMA,iCAAsD;AACtD,8DAAgC;AAChC,kDAA0B;AAC1B,qCAAkC;AAClC,iDAAqD;AAErD,qCAAmE;AAoBnE,IAAY,OASX;AATD,WAAY,OAAO;IAElB,8BAAmB,CAAA;IAEnB,8BAAmB,CAAA;IAEnB,oCAAyB,CAAA;IAEzB,kCAAuB,CAAA;AACxB,CAAC,EATW,OAAO,GAAP,eAAO,KAAP,eAAO,QASlB;AAqGD,MAAa,UAAU;IAiDtB,YAAY,IAA2B;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,oBAAoB,CAAC;QAC9C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,iBAAiB,GAAG,IAAA,yBAAkB,EAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;YAAE,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,KAAK;YAChC,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,UAAU,EAAE,IAAI,CAAC,UAAU,IAAI,KAAK;SACpC,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,CAAC;IAsBD,KAAK,CAAC,QAAQ,CAAC,OAAe,CAAC,EAAE,SAAiB,EAAE,KAAa;QAChE,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC;YAAE,MAAM,kCAAkC,IAAI,CAAC,IAAI,EAAE,CAAC;QAC7E,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ;YAAE,MAAM,mCAAmC,IAAI,CAAC,IAAI,EAAE,CAAC;QAC3F,MAAM,GAAG,GACR,KAAK,EAAE,GAAG;YACV,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE;iBACrB,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC;iBACtB,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,GAAG,CAAC;YACX,CAAC,CAAC,CAAC,CAAC;QACN,IAAI,CAAC,GAAG;YAAE,MAAM,gCAAgC,IAAI,CAAC,IAAI,EAAE,CAAC;QAE5D,MAAM,IAAI,GAAU;YACnB,KAAK;YACL,IAAI;YACJ,IAAI;YACJ,GAAG;YAKH,IAAI;YACJ,MAAM;YAKN,KAAK;YACL,GAAG;SACH,CAAC;QACF,IAAI,KAAK,EAAE,OAAO;YAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACrD,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;QACvC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC;YAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC3D,IAAA,eAAQ,EAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;QAE1C,IAAI,qBAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;YACtC,IAAA,eAAQ,EAAC,8BAA8B,IAAI,CAAC,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,IAAI,qBAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YACjC,IAAA,eAAQ,EAAC,8BAA8B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,qBAAK,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACzC,CAAC;IAMD,KAAK,CAAC,SAAS;QACd,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC/B,IAAI,IAAI,CAAC,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC;YACrD,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAElE,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,EAAE;YACrC,IAAA,eAAQ,EAAC,oDAAoD,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAEhB,IAAI,aAAa,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC1D,IAAI,CAAC,aAAa;gBAAE,MAAM,qDAAqD,CAAC;YAEhF,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;YACjC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC;YACjD,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK;iBACnB,MAAM,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC;iBACxC,MAAM,CACN,CAAC,CAAQ,EAAE,EAAE,CACZ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC;gBAChC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC;gBACjC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CACjC;iBACA,IAAI,CAAC,CAAC,CAAQ,EAAE,CAAQ,EAAE,EAAE;gBAC5B,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO;oBAAE,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;gBACzD,OAAO,CAAC,CAAC;YACV,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,CAAQ,EAAE,CAAQ,EAAE,EAAE;gBAC5B,IAAI,YAAY,GAAG,CAAC,OAAe,EAAE,EAAE;oBACtC,IAAI,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC;wBAAE,OAAO,CAAC,CAAC;oBACxC,IAAI,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC;wBAAE,OAAO,CAAC,CAAC;oBAC1C,IAAI,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC;wBAAE,OAAO,CAAC,CAAC;oBACvC,OAAO,CAAC,CAAC;gBACV,CAAC,CAAC;gBAEF,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS;oBACnD,OAAO,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC1D,OAAO,CAAC,CAAC;YACV,CAAC,CAAC,CAAC;YAEJ,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACjB;QAED,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,UAAU,EAAE;YAExC,IAAA,eAAQ,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK;iBACnB,MAAM,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC;iBACxC,MAAM,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;iBAC3F,MAAM,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;iBACzD,IAAI,CAAC,CAAC,CAAQ,EAAE,CAAQ,EAAE,EAAE;gBAC5B,IAAI,YAAY,GAAG,CAAC,OAAe,EAAE,EAAE;oBACtC,IAAI,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC;wBAAE,OAAO,CAAC,CAAC;oBACtC,IAAI,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC;wBAAE,OAAO,CAAC,CAAC;oBAC1C,IAAI,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC;wBAAE,OAAO,CAAC,CAAC;oBACvC,OAAO,CAAC,CAAC;gBACV,CAAC,CAAC;gBAEF,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS;oBACnD,OAAO,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC1D,OAAO,CAAC,CAAC;YACV,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACT,IAAA,eAAQ,EAAC,IAAI,CAAC,CAAC;YAEf,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;gBAClE,MAAM,GAAG,CAAC;YACX,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACpB,OAAO,IAAI,CAAC;SACZ;QAED,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,EAAE;YACrC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK;iBACnB,MAAM,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC;iBACxC,MAAM,CACN,CAAC,CAAQ,EAAE,EAAE,CACZ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC;gBAChC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC;gBACjC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CACjC;iBACA,IAAI,CAAC,CAAC,CAAQ,EAAE,CAAQ,EAAE,EAAE;gBAC5B,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO;oBAAE,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;gBACzD,OAAO,CAAC,CAAC;YACV,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,CAAQ,EAAE,CAAQ,EAAE,EAAE;gBAC5B,IAAI,YAAY,GAAG,CAAC,OAAe,EAAE,EAAE;oBACtC,IAAI,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC;wBAAE,OAAO,CAAC,CAAC;oBACxC,IAAI,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC;wBAAE,OAAO,CAAC,CAAC;oBAC1C,IAAI,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC;wBAAE,OAAO,CAAC,CAAC;oBACvC,OAAO,CAAC,CAAC;gBACV,CAAC,CAAC;gBAEF,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS;oBACnD,OAAO,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC1D,OAAO,CAAC,CAAC;YACV,CAAC,CAAC,CAAC;YACJ,IAAA,eAAQ,EAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;YAE9C,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACjB;QAED,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,SAAS,EAAE;YACvC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACrB;QAED,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IACzE,CAAC;IAKD,KAAK,CAAC,iBAAiB;QACtB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO;QAEhD,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,EAAE;YACrC,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAC7B,GAAG,IAAA,eAAM,EAAC,uBAAuB,CAAC,kBACjC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,OACvC,yBAAyB,CACzB,CAAC;YACF,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,IAAA,eAAQ,EAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;YAE1C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe;iBAC/B,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC;iBAC1C,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;gBACf,OAAO;oBACN,GAAG,EAAE,CAAC,CAAC,GAAG;oBACV,OAAO,EAAE,CAAC,CAAC,YAAY;oBACvB,QAAQ,EAAE,CAAC,CAAC,IAAI;oBAChB,OAAO,EAAE,CAAC,CAAC,OAAO;iBAClB,CAAC;YACH,CAAC,CAAC,CAAC;SACJ;QAED,OAAO;IACR,CAAC;IAKD,KAAK,CAAC,wBAAwB;QAC7B,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,EAAE;YAErC,IAAI,EAAE,GAAG,CACR,MAAM,IAAA,wBAAc,EACnB,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAC3D,CAAC,EACD,OAAO,CACP,CACD,EAAE,CAAC,CAAC,CAAC,CAAC;YACP,IAAI,EAAE,YAAY,UAAU;gBAAE,OAAO,EAAE,CAAC;SACxC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAKD,KAAK,CAAC,aAAa;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QACrE,IAAI,IAAI,GACP,CAAC,MAAM,IAAA,yBAAgB,EAAC,GAAG,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAC5D,CAAC,MAAM,IAAA,yBAAgB,EAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QAIvB,IAAI,CAAC,MAAM,GAAG,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC;QAEnD,OAAO,IAAI,CAAC;IACb,CAAC;IAKD,WAAW,CAAC,QAAa;QACxB,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAClC,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AAjUD,gCAiUC;AAkCD,MAAa,aAAa;IAoCzB,YAAY,IAA8B;QACzC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,iBAAiB,GAAG,IAAA,yBAAkB,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;QACrC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;YAAE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,aAAa,EAAE,IAAI,CAAC,aAAa,IAAI,KAAK;YAC1C,EAAE,EAAE,IAAI,CAAC,EAAE;SACX,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,CAAC;IAKD,WAAW,CAAC,QAAa;QACxB,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAClC,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AA9DD,sCA8DC;AAQD,MAAa,KAAK;IAKjB,YAAY,OAAY,EAAE,IAAG,CAAC;CAC9B;AAND,sBAMC","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module\n */\n\nimport { Readable } from \"stream\";\nimport { debugLog, getTimeFromSeconds } from \"./util\";\nimport prism from \"prism-media\";\nimport axios from \"axios\";\nimport { getKey } from \"./config\";\nimport { YouTube_Search } from \"../services/YouTube\";\nimport { SoundCloud_Search } from \"../services/SoundCloud\";\nimport { fetchGeniusSongLyrics, searchGeniusSong } from \"./genius\";\n\nexport interface SearchOptions {\n\t/** Service to search track on */\n\tservice?: Service;\n\t/** Maximum results to return */\n\tlimit?: number;\n\t/**\n\t * Type of results to return\n\t * In the case of YouTube, videos and tracks are the same thing.\n\t */\n\ttype?: \"tracks\" | \"videos\" | \"playlists\" | \"albums\";\n}\n\n/** Type of media - Is it a MusicTrack or MusicPlaylist? */\nexport type BarbaraType = MusicTrack | MusicPlaylist;\n\n/**\n * A service represents the platform that is providing the media (e.g. SoundCloud).\n */\nexport enum Service {\n\t/** Spotify */\n\tspotify = \"spotify\",\n\t/** YouTube */\n\tyoutube = \"youtube\",\n\t/** SoundCloud */\n\tsoundcloud = \"soundcloud\",\n\t/** Audio File */\n\taudiofile = \"audiofile\",\n}\n\n/**\n * An audio format used for streaming.\n * Contains data such as the streaming URL, mime type and quality.\n */\nexport interface Audio {\n\t/** Audio URL */\n\turl: string;\n\t/** Audio quality */\n\tquality?: string;\n\t/** Audio duration **in seconds** */\n\tduration?: number;\n\t/** Audio protocol */\n\tprotocol?: string;\n\t/** Audio mime type */\n\tmimeType: string;\n\t/** Audio bitrate */\n\tbitrate?: number;\n\t/** Audio codec */\n\tcodec?: string;\n}\n\n/**\n * An author that represents an online user that created media/content.\n * Contains data such as friendly URL, avatar URL and name.\n */\nexport interface Author {\n\t/** Public page URL */\n\turl?: string;\n\t/** Avatar/Profile picture/Channel icon URL */\n\tavatar?: string;\n\t/** Name of author */\n\tname?: string;\n\t/** ID of author */\n\tid?: string;\n\t/** Is the author verified? */\n\tverified?: boolean;\n}\n\n/**\n * Represents a song on Genius.\n * Contains data such as lyrics and title.\n */\nexport interface GeniusSong {\n\t/** Array containing lyrics */\n\tlyrics?: string[];\n\t/** Friendly URL of song on Genius */\n\turl: string;\n\t/** Genius Pyongs count */\n\tpyongs?: number;\n\t/** Full title of song on Genius (name and artist concatenated by \"by\") */\n\ttitle: string;\n\t/** Name of song on Genius */\n\tname: string;\n\t/** Primary artist of song on Genius */\n\tartist: Author;\n\t/** URL of song art thumbnail */\n\tthumbnail: string;\n\t/** ID of song on Genius */\n\tid: number;\n\t/** State of the lyrics of the song on Genius (\"complete\" if the lyrics are all there) */\n\tlyricsState: string;\n}\n\n/**\n * MusicTrack Data Constructor\n *\n * Interface for `data` parameter used when creating a new {@link MusicTrack}\n */\nexport interface MusicTrackConstructor {\n\t/** Name of track */\n\tname: string;\n\t/** Friendly URL of track */\n\turl: string;\n\t/** Service's ID of track */\n\tid?: string;\n\t/** URL of thumbnail */\n\tthumbnail: string;\n\t/** Author/artist of track */\n\tauthor: Author[] | Author;\n\t/** Reference of who queued the track */\n\tqueuedBy?: any;\n\t/** Duration of the track in seconds */\n\tduration: number;\n\t/** Is the track live? */\n\tlive?: boolean;\n\t/** Is the track explicit? */\n\texplicit?: any;\n\t/** Is the track in a playlist? Set true wehn adding to `MusicPlaylist.tracks` */\n\tplaylisted?: boolean;\n\t/** Is the track unstreamable (e.g. a Spotify track) and was the audio replaced by an alternative source's audio? */\n\tresolvedTo?: Service;\n\t/** Service which is hosting the track */\n\tservice: Service;\n\t/** Audio data */\n\taudio?: Audio[];\n\t/** The original/raw data recieved when making the request */\n\toriginalData: any;\n}\n\nexport class MusicTrack {\n\t/** Friendly URL of the track (e.g. https://youtube.com/watch?v=videoid) */\n\turl: string;\n\t/** Name of the track */\n\tname: string;\n\t/** An object containing additional metadata that may not always be included; e.g. the user that queued the track */\n\tmetadata: {\n\t\t/** A reference to the user that queued the track - Can be set via {@link MusicTrack.setQueuedBy} or modified manually */\n\t\tqueuedBy?: any;\n\t\t/** Is the track deemed as explicit? */\n\t\texplicit?: boolean;\n\t\t/** ID of the track on the platform (e.g. https://www.youtube.com/watch?v=dQw4w9WgXcQ --> `dQw4w9WgXcQ`) */\n\t\tid?: string;\n\t\t/** If the track wasn't streamable (e.g. Spotify), was the tracks audio replaced by an alternative source's track, and which service. */\n\t\tresolvedTo: Service | false;\n\t};\n\t/** Duration of the track **in seconds** */\n\tduration: number;\n\t/** Duration of the track **in timestamp** (e.g. `12:34`) */\n\tdurationTimestamp: string;\n\t/** Is the track live-streaming? (e.g. a YouTube livestream) */\n\tlive: boolean;\n\t/** Has the track been playlisted? */\n\tplaylisted: boolean;\n\t/** The service providing track (e.g. YouTube) */\n\tservice: Service;\n\t/** Thumbnail URL of the track */\n\tthumbnail: string;\n\t/** Array of media urls. May be empty in the case that the service does not provide streaming. */\n\taudio: Audio[];\n\t/** An array of the authors of the music track. For example, a YouTube channel or SoundCloud user profile */\n\tauthors: Author[];\n\t/**\n\t * Original data retreieved from request to service's API.\n\t * For debug and if theres any data not included in MusicTrack itself thats needed.\n\t */\n\toriginalData?: any;\n\n\t/**\n\t * An object that represents a music track.\n\t *\n\t * @example\n\t * ```\n\t * let Track = new MusicTrack();\n\t * console.log(Track.url);\n\t * console.log(Track.name);\n\t * console.log(Track.duration);\n\t * ```\n\t */\n\tconstructor(data: MusicTrackConstructor) {\n\t\tthis.name = data.name || \"Unnamed MusicTrack\";\n\t\tthis.url = data.url;\n\t\tthis.thumbnail = data.thumbnail;\n\t\tthis.duration = data.duration || 0;\n\t\tthis.durationTimestamp = getTimeFromSeconds(data.duration || 0);\n\t\tthis.live = data.live || false;\n\t\tthis.playlisted = data.playlisted || false;\n\t\tthis.service = data.service;\n\t\tthis.audio = data.audio || [];\n\t\tif (!Array.isArray(data?.author)) data.author = [data.author];\n\t\tthis.authors = data.author;\n\t\tthis.metadata = {\n\t\t\tqueuedBy: data.queuedBy || null,\n\t\t\texplicit: data.explicit || false,\n\t\t\tid: data.id,\n\t\t\tresolvedTo: data.resolvedTo || false,\n\t\t};\n\t\tthis.originalData = data.originalData;\n\t}\n\n\t/**\n\t * Returns a **Prism Media FFmpeg** object.\n\t *\n\t * @example\n\t * ```\n\t * const resource = await discordVoice.createAudioResource(Track.resource());\n\t *\n\t * ```\n\t *\n\t * @param seek Number of seconds to seek in the track. Obviously defaults to 0\n\t * @param extraArgs An array of extra arguments to pass to Prism when creating the FFmpeg object.\n\t * Basically just your standard FFmpeg arguments but in array form. For example:\n\t * ```\n\t * \"-ar\",\n\t * \"48000\",\n\t * \"-ac\",\n\t * \"2\"\n\t * ```\n\t * @param audio Custom audio object to use instead of relying on {@link MusicTrack.bestAudio()}\n\t */\n\tasync resource(seek: number = 0, extraArgs?: any[], audio?: Audio) {\n\t\tif (this.duration === 0) throw `Track duration is 0 for track: ${this.name}`;\n\t\tif (seek < 0 || seek > this.duration) throw `Seek is out of range for track: ${this.name}`;\n\t\tconst url =\n\t\t\taudio?.url ||\n\t\t\t(await this.bestAudio()\n\t\t\t\t.then(({ url }) => url)\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t}));\n\t\tif (!url) throw `Cannot get streaming URL for ${this.name}`;\n\t\t// TODO: possibly make a way better args system\n\t\tconst args: any[] = [\n\t\t\t\"-ss\",\n\t\t\tseek,\n\t\t\t\"-i\",\n\t\t\turl,\n\t\t\t// \"-analyzeduration\",\n\t\t\t// \"0\",\n\t\t\t// \"-loglevel\",\n\t\t\t// \"48\",\n\t\t\t\"-f\",\n\t\t\t\"opus\",\n\t\t\t// Audio rate/resolution\n\t\t\t// \"-ar\",\n\t\t\t// \"64000\",\n\t\t\t// Audio channels\n\t\t\t\"-ac\",\n\t\t\t\"2\",\n\t\t];\n\t\tif (audio?.bitrate) args.push(\"-b:a\", audio.bitrate);\n\t\tif (extraArgs) args.push(...extraArgs);\n\t\tif (!extraArgs?.includes(\"-ar\")) args.push(\"-ar\", \"48000\");\n\t\tdebugLog(`MusicTrack FFmpeg args:`, args);\n\n\t\tnew prism.FFmpeg().on(\"error\", (err) => {\n\t\t\tdebugLog(`FFmpeg streaming error for ${this.name}: ${err}`);\n\t\t});\n\n\t\tnew prism.FFmpeg().on(\"end\", () => {\n\t\t\tdebugLog(`FFmpeg streaming ended for ${this.name}`);\n\t\t});\n\n\t\treturn new prism.FFmpeg({ args: args });\n\t}\n\n\t/**\n\t * Returns the best audio format.\n\t * **Note:** if SoundCloud is the service, `Audio.url` is changed to a time sensitive URL due to SoundCloud APIs.\n\t */\n\tasync bestAudio(): Promise<Audio> {\n\t\tawait this.fetchMissingAudio();\n\t\tif (this.audio == undefined || this.audio?.length == 0)\n\t\t\tthrow new Error(\"MusicTrack does not contain any audio streams\");\n\n\t\tif (this.service === Service.spotify) {\n\t\t\tdebugLog(`Searching for Spotify track on alternative sources`);\n\t\t\tthis.audio = [];\n\n\t\t\tlet resolvedTrack = await this.resolveUnstreamableTrack();\n\t\t\tif (!resolvedTrack) throw \"Could not find Spotify track on alternative sources\";\n\n\t\t\tthis.audio = resolvedTrack.audio;\n\t\t\tthis.metadata.resolvedTo = resolvedTrack.service;\n\t\t\tlet best = this.audio\n\t\t\t\t.filter((a: Audio) => a.url != undefined)\n\t\t\t\t.filter(\n\t\t\t\t\t(a: Audio) =>\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mp3\") ||\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mpeg\") ||\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mp4\")\n\t\t\t\t)\n\t\t\t\t.sort((a: Audio, b: Audio) => {\n\t\t\t\t\tif (a.bitrate && b.bitrate) return b.bitrate - a.bitrate;\n\t\t\t\t\treturn 0;\n\t\t\t\t})\n\t\t\t\t.sort((a: Audio, b: Audio) => {\n\t\t\t\t\tlet qualityToInt = (quality: string) => {\n\t\t\t\t\t\tif (quality?.includes(\"HIGH\")) return 3;\n\t\t\t\t\t\tif (quality?.includes(\"MEDIUM\")) return 2;\n\t\t\t\t\t\tif (quality?.includes(\"LOW\")) return 1;\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (a.quality != undefined && b.quality != undefined)\n\t\t\t\t\t\treturn qualityToInt(b.quality) - qualityToInt(a.quality);\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\n\t\t\treturn best?.[0];\n\t\t}\n\n\t\tif (this.service === Service.soundcloud) {\n\t\t\t// debugLog(this.audio);\n\t\t\tdebugLog(this.audio);\n\t\t\tlet best = this.audio\n\t\t\t\t.filter((a: Audio) => a.url != undefined)\n\t\t\t\t.filter((a: Audio) => a.mimeType.includes(\"audio/mpeg\") || a.mimeType.includes(\"audio/ogg\"))\n\t\t\t\t.filter((a: Audio) => a.protocol?.includes(\"progressive\"))\n\t\t\t\t.sort((a: Audio, b: Audio) => {\n\t\t\t\t\tlet qualityToInt = (quality: string) => {\n\t\t\t\t\t\tif (quality?.includes(\"sq\")) return 3;\n\t\t\t\t\t\tif (quality?.includes(\"medium\")) return 2;\n\t\t\t\t\t\tif (quality?.includes(\"low\")) return 1;\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (a.quality != undefined && b.quality != undefined)\n\t\t\t\t\t\treturn qualityToInt(b.quality) - qualityToInt(a.quality);\n\t\t\t\t\treturn 0;\n\t\t\t\t})?.[0];\n\t\t\tdebugLog(best);\n\n\t\t\tlet { data } = await axios.get(`${best.url}`).catch((err: Error) => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t\tbest.url = data.url;\n\t\t\treturn best;\n\t\t}\n\n\t\tif (this.service === Service.youtube) {\n\t\t\tawait this.fetchMissingAudio();\n\t\t\tlet best = this.audio\n\t\t\t\t.filter((a: Audio) => a.url != undefined)\n\t\t\t\t.filter(\n\t\t\t\t\t(a: Audio) =>\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mp3\") ||\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mpeg\") ||\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mp4\")\n\t\t\t\t)\n\t\t\t\t.sort((a: Audio, b: Audio) => {\n\t\t\t\t\tif (a.bitrate && b.bitrate) return b.bitrate - a.bitrate;\n\t\t\t\t\treturn 0;\n\t\t\t\t})\n\t\t\t\t.sort((a: Audio, b: Audio) => {\n\t\t\t\t\tlet qualityToInt = (quality: string) => {\n\t\t\t\t\t\tif (quality?.includes(\"HIGH\")) return 3;\n\t\t\t\t\t\tif (quality?.includes(\"MEDIUM\")) return 2;\n\t\t\t\t\t\tif (quality?.includes(\"LOW\")) return 1;\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (a.quality != undefined && b.quality != undefined)\n\t\t\t\t\t\treturn qualityToInt(b.quality) - qualityToInt(a.quality);\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\tdebugLog(`Ranking YouTube best audio:`, best);\n\n\t\t\treturn best?.[0];\n\t\t}\n\n\t\tif (this.service === Service.audiofile) {\n\t\t\treturn this.audio[0];\n\t\t}\n\n\t\tthrow new Error(\"An error occurred when attempting to find best audio\");\n\t}\n\n\t/**\n\t * Adds neccessary audio data to MusicTrack in the case it was not added.\n\t */\n\tasync fetchMissingAudio() {\n\t\tif (this.audio && this.audio.length > 0) return;\n\n\t\tif (this.service === Service.youtube) {\n\t\t\tlet { data } = await axios.get(\n\t\t\t\t`${getKey(\"YOUTUBE_INVIDIOUSSITE\")}/api/v1/videos/${\n\t\t\t\t\tthis.metadata.id || this.originalData.videoId\n\t\t\t\t}?fields=adaptiveFormats`\n\t\t\t);\n\t\t\tif (!data) return;\n\t\t\tdebugLog(`FetchMissingAudio data:`, data);\n\n\t\t\tthis.audio = data.adaptiveFormats\n\t\t\t\t.filter((f: any) => f.audioQuality != null)\n\t\t\t\t.map((f: any) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\turl: f.url,\n\t\t\t\t\t\tquality: f.audioQuality,\n\t\t\t\t\t\tmimeType: f.type,\n\t\t\t\t\t\tbitrate: f.bitrate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/**\n\t * If the track is not streamable (e.g. Spotify), attempt to find a track on an alternative source and use the audio from there\n\t */\n\tasync resolveUnstreamableTrack() {\n\t\tif (this.service === Service.spotify) {\n\t\t\t// TODO: maybe use fuse.js to get a more accurate search\n\t\t\tlet yt = (\n\t\t\t\tawait YouTube_Search(\n\t\t\t\t\t`${this.name} ${this.authors.map((v) => v.name).join(\" \")}`,\n\t\t\t\t\t1,\n\t\t\t\t\t\"video\"\n\t\t\t\t)\n\t\t\t)?.[0];\n\t\t\tif (yt instanceof MusicTrack) return yt;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Searches for the track on Genius and returns a {@link GeniusSong}. Contains data including lyrics.\n\t */\n\tasync getGeniusSong(): Promise<GeniusSong | null> {\n\t\tlet title = this.name.toLowerCase().replace(/(\\(|)lyrics(\\)|)/g, \"\");\n\t\tlet song =\n\t\t\t(await searchGeniusSong(`${title} ${this.authors[0].name}`)) ||\n\t\t\t(await searchGeniusSong(`${title}`));\n\t\tif (!song) return null;\n\t\t// let lyrics = await fetchGeniusSongLyrics(song.url).catch((err) => {\n\t\t// \tthrow err;\n\t\t// });\n\t\tsong.lyrics = [\"Lyrics not implemented atm\"] || [];\n\n\t\treturn song;\n\t}\n\n\t/**\n\t * Set who queued the track, for example the user's Discord ID\n\t */\n\tsetQueuedBy(queuedBy: any) {\n\t\tthis.metadata.queuedBy = queuedBy;\n\t\treturn this;\n\t}\n}\n\n/**\n * MusicPlaylist Data Constructor\n *\n * Interface for `data` parameter used when creating a new {@link MusicPlaylist}\n */\nexport interface MusicPlaylistConstructor {\n\t/** Name of playlist */\n\tname: string;\n\t/** Friendly URL of playlist */\n\turl: string;\n\t/** Service's ID of playlist */\n\tid?: string;\n\t/** URL of thumbnail */\n\tthumbnail: string;\n\t/** User(s) that created this playlist */\n\tauthors: Author[] | Author;\n\t/** Duration of the track in seconds */\n\tduration: number;\n\t/** Reference of who queued the playlist */\n\tqueuedBy?: any;\n\t/** Is the playlist an album? */\n\tisAlbum?: boolean;\n\t/** Array of tracks in playlist */\n\ttracks: MusicTrack[];\n\t/** Is the playlist collaborative/editable by other users on the platform? */\n\tcollaborative?: boolean;\n\t/** Service which is hosting the playlist */\n\tservice: Service;\n\t/** The original/raw data recieved when making the request */\n\toriginalData: any;\n}\n\nexport class MusicPlaylist {\n\t/** Friendly URL of the playlist */\n\turl: string;\n\t/** Name of the playlist */\n\tname: string;\n\tmetadata: {\n\t\t/** A reference to the user that queued the playlist - Can be set via {@link MusicPlaylist.setQueuedBy} or modified manually */\n\t\tqueuedBy?: any;\n\t\t/** Is the playlist collaborative/editable by other users on the platform?  */\n\t\tcollaborative?: boolean;\n\t\t/** ID of the playlist on the platform */\n\t\tid?: string;\n\t};\n\t/** Duration of all the tracks **in seconds** */\n\tduration: number;\n\t/** Duration of all the tracks **in timestamp** (e.g. `12:34`) */\n\tdurationTimestamp: string;\n\t/** Is the playlist an album? */\n\tisAlbum: boolean;\n\t/** Array of MusicTracks in playlist */\n\ttracks: MusicTrack[];\n\t/** Array of authors of the playlist. For example, a YouTube channel or SoundCloud user profile */\n\tauthor: Author[];\n\t/** The service providing the playlist */\n\tservice: Service;\n\t/** Thumbnail of the playlist */\n\tthumbnail?: string;\n\t/**\n\t * Original data retreieved from request to service's API.\n\t * There for debug and if theres any metadata not included in MusicTrack itself.\n\t */\n\toriginalData?: any;\n\n\t/**\n\t * An object that represents a music playlist. Refer to cheatsheet for data object parameters.\n\t */\n\tconstructor(data: MusicPlaylistConstructor) {\n\t\tthis.url = data.url;\n\t\tthis.name = data.name;\n\t\tthis.duration = data.duration;\n\t\tthis.durationTimestamp = getTimeFromSeconds(data.duration);\n\t\tthis.isAlbum = data.isAlbum || false;\n\t\tthis.tracks = data.tracks || [];\n\t\tthis.service = data.service;\n\t\tthis.thumbnail = data.thumbnail;\n\t\tif (!Array.isArray(data?.authors)) data.authors = [data.authors];\n\t\tthis.author = data.authors;\n\t\tthis.metadata = {\n\t\t\tqueuedBy: data.queuedBy,\n\t\t\tcollaborative: data.collaborative || false,\n\t\t\tid: data.id,\n\t\t};\n\t\tthis.originalData = data.originalData;\n\t}\n\n\t/**\n\t * Set who queued the playlist, for example the user's Discord ID\n\t */\n\tsetQueuedBy(queuedBy: any) {\n\t\tthis.metadata.queuedBy = queuedBy;\n\t\treturn this;\n\t}\n}\n\nexport interface QueueConstructor {\n\t/** Identifier for the queue */\n\tid: string;\n}\n\n// TODO: queues\nexport class Queue {\n\t/**\n\t * Represents a queue\n\t * @param data\n\t */\n\tconstructor(data: any = {}) {}\n}\n"]}