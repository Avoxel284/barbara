{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/lib/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module\r\n */\r\n\r\nimport { Readable } from \"stream\";\r\nimport { debugLog, getTimeFromSeconds } from \"./util\";\r\nimport prism from \"prism-media\";\r\nimport axios from \"axios\";\r\nimport { getKey } from \"./config\";\r\nimport { YouTube_Search } from \"../services/YouTube\";\r\nimport { SoundCloud_Search } from \"../services/SoundCloud\";\r\nimport { fetchGeniusSongLyrics, searchGeniusSong } from \"./genius\";\r\n\r\nexport interface SearchOptions {\r\n\t/** Service to search track on */\r\n\tservice?: Service;\r\n\t/** Maximum results to return */\r\n\tlimit?: number;\r\n\t/**\r\n\t * Type of results to return\r\n\t * In the case of YouTube, videos and tracks are the same thing.\r\n\t */\r\n\ttype?: \"tracks\" | \"videos\" | \"playlists\" | \"albums\";\r\n}\r\n\r\n/** Type of media - Is it a MusicTrack or MusicPlaylist? */\r\nexport type BarbaraType = MusicTrack | MusicPlaylist;\r\n\r\n/**\r\n * A service represents the platform that is providing the media (e.g. SoundCloud).\r\n */\r\nexport enum Service {\r\n\t/** Spotify */\r\n\tspotify = \"spotify\",\r\n\t/** YouTube */\r\n\tyoutube = \"youtube\",\r\n\t/** SoundCloud */\r\n\tsoundcloud = \"soundcloud\",\r\n\t/** Audio File */\r\n\taudiofile = \"audiofile\",\r\n}\r\n\r\n/**\r\n * An audio format used for streaming.\r\n * Contains data such as the streaming URL, mime type and quality.\r\n */\r\nexport interface Audio {\r\n\t/** Audio URL */\r\n\turl: string;\r\n\t/** Audio quality */\r\n\tquality?: string;\r\n\t/** Audio duration **in seconds** */\r\n\tduration?: number;\r\n\t/** Audio protocol */\r\n\tprotocol?: string;\r\n\t/** Audio mime type */\r\n\tmimeType: string;\r\n\t/** Audio bitrate */\r\n\tbitrate?: number;\r\n\t/** Audio codec */\r\n\tcodec?: string;\r\n}\r\n\r\n/**\r\n * An author that represents an online user that created media/content.\r\n * Contains data such as friendly URL, avatar URL and name.\r\n */\r\nexport interface Author {\r\n\t/** Public page URL */\r\n\turl?: string;\r\n\t/** Avatar/Profile picture/Channel icon URL */\r\n\tavatar?: string;\r\n\t/** Name of author */\r\n\tname?: string;\r\n\t/** ID of author */\r\n\tid?: string;\r\n\t/** Is the author verified? */\r\n\tverified?: boolean;\r\n}\r\n\r\n/**\r\n * Represents a song on Genius.\r\n * Contains data such as lyrics and title.\r\n */\r\nexport interface GeniusSong {\r\n\t/** Array containing lyrics */\r\n\tlyrics?: string[];\r\n\t/** Friendly URL of song on Genius */\r\n\turl: string;\r\n\t/** Genius Pyongs count */\r\n\tpyongs?: number;\r\n\t/** Full title of song on Genius (name and artist concatenated by \"by\") */\r\n\ttitle: string;\r\n\t/** Name of song on Genius */\r\n\tname: string;\r\n\t/** Primary artist of song on Genius */\r\n\tartist: Author;\r\n\t/** URL of song art thumbnail */\r\n\tthumbnail: string;\r\n\t/** ID of song on Genius */\r\n\tid: number;\r\n\t/** State of the lyrics of the song on Genius (\"complete\" if the lyrics are all there) */\r\n\tlyricsState: string;\r\n}\r\n\r\n/**\r\n * MusicTrack Data Constructor\r\n *\r\n * Interface for `data` parameter used when creating a new {@link MusicTrack}\r\n */\r\nexport interface MusicTrackConstructor {\r\n\t/** Name of track */\r\n\tname: string;\r\n\t/** Friendly URL of track */\r\n\turl: string;\r\n\t/** Service's ID of track */\r\n\tid?: string;\r\n\t/** URL of thumbnail */\r\n\tthumbnail: string;\r\n\t/** Author/artist of track */\r\n\tauthor: Author[] | Author;\r\n\t/** Reference of who queued the track */\r\n\tqueuedBy?: any;\r\n\t/** Duration of the track in seconds */\r\n\tduration: number;\r\n\t/** Is the track live? */\r\n\tlive?: boolean;\r\n\t/** Is the track explicit? */\r\n\texplicit?: any;\r\n\t/** Is the track in a playlist? Set true wehn adding to `MusicPlaylist.tracks` */\r\n\tplaylisted?: boolean;\r\n\t/** Is the track unstreamable (e.g. a Spotify track) and was the audio replaced by an alternative source's audio? */\r\n\tresolvedTo?: Service;\r\n\t/** Service which is hosting the track */\r\n\tservice: Service;\r\n\t/** Audio data */\r\n\taudio?: Audio[];\r\n\t/** The original/raw data recieved when making the request */\r\n\toriginalData: any;\r\n}\r\n\r\nexport class MusicTrack {\r\n\t/** Friendly URL of the track (e.g. https://youtube.com/watch?v=videoid) */\r\n\turl: string;\r\n\t/** Name of the track */\r\n\tname: string;\r\n\t/** An object containing additional metadata that may not always be included; e.g. the user that queued the track */\r\n\tmetadata: {\r\n\t\t/** A reference to the user that queued the track - Can be set via {@link MusicTrack.setQueuedBy} or modified manually */\r\n\t\tqueuedBy?: any;\r\n\t\t/** Is the track deemed as explicit? */\r\n\t\texplicit?: boolean;\r\n\t\t/** ID of the track on the platform (e.g. https://www.youtube.com/watch?v=dQw4w9WgXcQ --> `dQw4w9WgXcQ`) */\r\n\t\tid?: string;\r\n\t\t/** If the track wasn't streamable (e.g. Spotify), was the tracks audio replaced by an alternative source's track, and which service. */\r\n\t\tresolvedTo: Service | false;\r\n\t};\r\n\t/** Duration of the track **in seconds** */\r\n\tduration: number;\r\n\t/** Duration of the track **in timestamp** (e.g. `12:34`) */\r\n\tdurationTimestamp: string;\r\n\t/** Is the track live-streaming? (e.g. a YouTube livestream) */\r\n\tlive: boolean;\r\n\t/** Has the track been playlisted? */\r\n\tplaylisted: boolean;\r\n\t/** The service providing track (e.g. YouTube) */\r\n\tservice: Service;\r\n\t/** Thumbnail URL of the track */\r\n\tthumbnail: string;\r\n\t/** Array of media urls. May be empty in the case that the service does not provide streaming. */\r\n\taudio: Audio[];\r\n\t/** An array of the authors of the music track. For example, a YouTube channel or SoundCloud user profile */\r\n\tauthors: Author[];\r\n\t/**\r\n\t * Original data retreieved from request to service's API.\r\n\t * For debug and if theres any data not included in MusicTrack itself thats needed.\r\n\t */\r\n\toriginalData?: any;\r\n\r\n\t/**\r\n\t * An object that represents a music track.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t * let Track = new MusicTrack();\r\n\t * console.log(Track.url);\r\n\t * console.log(Track.name);\r\n\t * console.log(Track.duration);\r\n\t * ```\r\n\t */\r\n\tconstructor(data: MusicTrackConstructor) {\r\n\t\tthis.name = data.name || \"Unnamed MusicTrack\";\r\n\t\tthis.url = data.url;\r\n\t\tthis.thumbnail = data.thumbnail;\r\n\t\tthis.duration = data.duration || 0;\r\n\t\tthis.durationTimestamp = getTimeFromSeconds(data.duration || 0);\r\n\t\tthis.live = data.live || false;\r\n\t\tthis.playlisted = data.playlisted || false;\r\n\t\tthis.service = data.service;\r\n\t\tthis.audio = data.audio || [];\r\n\t\tif (!Array.isArray(data?.author)) data.author = [data.author];\r\n\t\tthis.authors = data.author;\r\n\t\tthis.metadata = {\r\n\t\t\tqueuedBy: data.queuedBy || null,\r\n\t\t\texplicit: data.explicit || false,\r\n\t\t\tid: data.id,\r\n\t\t\tresolvedTo: data.resolvedTo || false,\r\n\t\t};\r\n\t\tthis.originalData = data.originalData;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a **Prism Media FFmpeg** object.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t * const resource = await discordVoice.createAudioResource(Track.resource());\r\n\t *\r\n\t * ```\r\n\t *\r\n\t * @param seek Number of seconds to seek in the track. Obviously defaults to 0\r\n\t * @param extraArgs An array of extra arguments to pass to Prism when creating the FFmpeg object.\r\n\t * Basically just your standard FFmpeg arguments but in array form. For example:\r\n\t * ```\r\n\t * \"-ar\",\r\n\t * \"48000\",\r\n\t * \"-ac\",\r\n\t * \"2\"\r\n\t * ```\r\n\t * @param audio Custom audio object to use instead of relying on {@link MusicTrack.bestAudio()}\r\n\t */\r\n\tasync resource(seek: number = 0, extraArgs?: any[], audio?: Audio) {\r\n\t\tif (this.duration === 0 && this.live === false)\r\n\t\t\tthrow `Track duration is 0 for track: ${this.name}`;\r\n\t\tif (seek < 0 || seek > this.duration) throw `Seek is out of range for track: ${this.name}`;\r\n\t\tconst url =\r\n\t\t\taudio?.url ||\r\n\t\t\t(await this.bestAudio()\r\n\t\t\t\t.then(({ url }) => url)\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tthrow err;\r\n\t\t\t\t}));\r\n\t\tif (!url) throw `Cannot get streaming URL for ${this.name}`;\r\n\t\t// TODO: possibly make a way better args system\r\n\t\tconst args: any[] = [\r\n\t\t\t\"-ss\",\r\n\t\t\tseek,\r\n\t\t\t\"-i\",\r\n\t\t\turl,\r\n\t\t\t// \"-analyzeduration\",\r\n\t\t\t// \"0\",\r\n\t\t\t// \"-loglevel\",\r\n\t\t\t// \"48\",\r\n\t\t\t\"-f\",\r\n\t\t\t\"opus\",\r\n\t\t\t// Audio rate/resolution\r\n\t\t\t// \"-ar\",\r\n\t\t\t// \"64000\",\r\n\t\t\t// Audio channels\r\n\t\t\t\"-ac\",\r\n\t\t\t\"2\",\r\n\t\t];\r\n\t\tif (audio?.bitrate && audio.bitrate < 510000) args.push(\"-b:a\", Math.round(audio.bitrate));\r\n\t\tif (extraArgs) args.push(...extraArgs);\r\n\t\tif (!extraArgs?.includes(\"-ar\")) args.push(\"-ar\", \"48000\");\r\n\t\tdebugLog(`MusicTrack FFmpeg args:`, args);\r\n\r\n\t\tnew prism.FFmpeg().on(\"error\", (err) => {\r\n\t\t\tdebugLog(`FFmpeg streaming error for ${this.name}: ${err}`);\r\n\t\t});\r\n\r\n\t\tnew prism.FFmpeg().on(\"end\", () => {\r\n\t\t\tdebugLog(`FFmpeg streaming ended for ${this.name}`);\r\n\t\t});\r\n\r\n\t\treturn new prism.FFmpeg({ args: args });\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the best audio format.\r\n\t *\r\n\t * **Note:** if SoundCloud is the service, `Audio.url` is changed to a time sensitive URL due to SoundCloud APIs.\r\n\t *\r\n\t * **Note:** if Spotify is the service, the track will attempt to find an alternative track on YouTube.\r\n\t */\r\n\tasync bestAudio(): Promise<Audio> {\r\n\t\tawait this.fetchMissingAudio();\r\n\t\tlet service = this.metadata.resolvedTo || this.service;\r\n\t\tif (this.audio == undefined || this.audio?.length == 0)\r\n\t\t\tthrow new Error(\"MusicTrack does not contain any audio streams\");\r\n\r\n\t\tif (service === Service.spotify) {\r\n\t\t\tthrow \"Streaming on Spotify is not supported. Try using resolveUnstreamableTrack() first!\";\r\n\t\t}\r\n\r\n\t\tif (service === Service.soundcloud) {\r\n\t\t\t// debugLog(this.audio);\r\n\t\t\tdebugLog(this.audio);\r\n\t\t\tlet best = this.audio\r\n\t\t\t\t.filter((a: Audio) => a.url != undefined)\r\n\t\t\t\t.filter((a: Audio) => a.mimeType.includes(\"audio/mpeg\") || a.mimeType.includes(\"audio/ogg\"))\r\n\t\t\t\t.filter((a: Audio) => a.protocol?.includes(\"progressive\"))\r\n\t\t\t\t.sort((a: Audio, b: Audio) => {\r\n\t\t\t\t\tlet qualityToInt = (quality: string) => {\r\n\t\t\t\t\t\tif (quality?.includes(\"sq\")) return 3;\r\n\t\t\t\t\t\tif (quality?.includes(\"medium\")) return 2;\r\n\t\t\t\t\t\tif (quality?.includes(\"low\")) return 1;\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (a.quality != undefined && b.quality != undefined)\r\n\t\t\t\t\t\treturn qualityToInt(b.quality) - qualityToInt(a.quality);\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t})?.[0];\r\n\t\t\tdebugLog(best);\r\n\r\n\t\t\tlet { data } = await axios.get(`${best.url}`).catch((err: Error) => {\r\n\t\t\t\tthrow err;\r\n\t\t\t});\r\n\t\t\tbest.url = data.url;\r\n\t\t\treturn best;\r\n\t\t}\r\n\r\n\t\tif (service === Service.youtube) {\r\n\t\t\tawait this.fetchMissingAudio();\r\n\t\t\tlet best = this.audio\r\n\t\t\t\t.filter((a: Audio) => a.url != undefined)\r\n\t\t\t\t.filter(\r\n\t\t\t\t\t(a: Audio) =>\r\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mp3\") ||\r\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mpeg\") ||\r\n\t\t\t\t\t\ta.mimeType.includes(\"audio/mp4\")\r\n\t\t\t\t)\r\n\t\t\t\t.sort((a: Audio, b: Audio) => {\r\n\t\t\t\t\tif (a.bitrate && b.bitrate) return b.bitrate - a.bitrate;\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t})\r\n\t\t\t\t.sort((a: Audio, b: Audio) => {\r\n\t\t\t\t\tlet qualityToInt = (quality: string) => {\r\n\t\t\t\t\t\tif (quality?.includes(\"HIGH\")) return 3;\r\n\t\t\t\t\t\tif (quality?.includes(\"MEDIUM\")) return 2;\r\n\t\t\t\t\t\tif (quality?.includes(\"LOW\")) return 1;\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (a.quality != undefined && b.quality != undefined)\r\n\t\t\t\t\t\treturn qualityToInt(b.quality) - qualityToInt(a.quality);\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\tdebugLog(`Ranking YouTube best audio:`, best);\r\n\r\n\t\t\treturn best?.[0];\r\n\t\t}\r\n\r\n\t\tif (service === Service.audiofile) {\r\n\t\t\treturn this.audio[0];\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"An error occurred when attempting to find best audio\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds neccessary audio data to MusicTrack in the case it was not added.\r\n\t */\r\n\tasync fetchMissingAudio() {\r\n\t\tif (this.audio && this.audio.length > 0) return;\r\n\r\n\t\tif (this.service === Service.youtube) {\r\n\t\t\tlet { data } = await axios.get(\r\n\t\t\t\t`${getKey(\"YOUTUBE_INVIDIOUSSITE\")}/api/v1/videos/${\r\n\t\t\t\t\tthis.metadata.id || this.originalData.videoId\r\n\t\t\t\t}?fields=adaptiveFormats`\r\n\t\t\t);\r\n\t\t\tif (!data) return;\r\n\t\t\tdebugLog(`FetchMissingAudio data:`, data);\r\n\r\n\t\t\tthis.audio = data.adaptiveFormats\r\n\t\t\t\t.filter((f: any) => f.audioQuality != null)\r\n\t\t\t\t.map((f: any) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: f.url,\r\n\t\t\t\t\t\tquality: f.audioQuality,\r\n\t\t\t\t\t\tmimeType: f.type,\r\n\t\t\t\t\t\tbitrate: f.bitrate,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * If the track is not streamable (e.g. Spotify), attempts to find a track on an alternative source and overwrites the current audio with the new audio.\r\n\t * The tracks `metadata.resolvedTo` property value will also be replaced with the resolved service.\r\n\t *\r\n\t * @example\r\n\t * ```\r\n\t * if (track.service === \"spotify\"){\r\n\t * \tlet { query } = await track.resolveUnstreamableTrack();\r\n\t * \tconsole.log(query);\r\n\t * \tconsole.log(await track.bestAudio());\r\n\t * }\r\n\t * ```\r\n\t * @returns Object containing the search query made (`query`) and found track (`result`) or undefined if couldn't find an alternative track\r\n\t */\r\n\tasync resolveUnstreamableTrack() {\r\n\t\tif (this.service === Service.spotify) {\r\n\t\t\t// TODO: maybe use fuse.js to get a more accurate search\r\n\t\t\tlet query = `${this.name} ${this.authors.map((v) => v.name).join(\" \")}`;\r\n\t\t\tlet yt = (await YouTube_Search(query, 10, \"video\"))?.[0];\r\n\t\t\tif (!yt) return;\r\n\t\t\tif (!(yt instanceof MusicTrack)) return;\r\n\r\n\t\t\tawait yt.fetchMissingAudio();\r\n\t\t\tthis.metadata.resolvedTo = Service.youtube;\r\n\t\t\tthis.audio = yt.audio;\r\n\t\t\treturn {\r\n\t\t\t\tquery: query,\r\n\t\t\t\tresult: yt,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Searches for the track on Genius and returns a {@link GeniusSong}. Contains data including lyrics.\r\n\t */\r\n\tasync getGeniusSong(): Promise<GeniusSong | null> {\r\n\t\tlet title = this.name.toLowerCase().replace(/(\\(|)lyrics(\\)|)/g, \"\");\r\n\t\tlet song =\r\n\t\t\t(await searchGeniusSong(`${title} ${this.authors[0].name}`)) ||\r\n\t\t\t(await searchGeniusSong(`${title}`));\r\n\t\tif (!song) return null;\r\n\t\t// let lyrics = await fetchGeniusSongLyrics(song.url).catch((err) => {\r\n\t\t// \tthrow err;\r\n\t\t// });\r\n\t\tsong.lyrics = [\"Lyrics not implemented atm\"] || [];\r\n\r\n\t\treturn song;\r\n\t}\r\n\r\n\t/**\r\n\t * Set who queued the track, for example the user's Discord ID\r\n\t */\r\n\tsetQueuedBy(queuedBy: any) {\r\n\t\tthis.metadata.queuedBy = queuedBy;\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\n/**\r\n * MusicPlaylist Data Constructor\r\n *\r\n * Interface for `data` parameter used when creating a new {@link MusicPlaylist}\r\n */\r\nexport interface MusicPlaylistConstructor {\r\n\t/** Name of playlist */\r\n\tname: string;\r\n\t/** Friendly URL of playlist */\r\n\turl: string;\r\n\t/** Service's ID of playlist */\r\n\tid?: string;\r\n\t/** URL of thumbnail */\r\n\tthumbnail: string;\r\n\t/** User(s) that created this playlist */\r\n\tauthors: Author[] | Author;\r\n\t/** Duration of the track in seconds */\r\n\tduration: number;\r\n\t/** Reference of who queued the playlist */\r\n\tqueuedBy?: any;\r\n\t/** Is the playlist an album? */\r\n\tisAlbum?: boolean;\r\n\t/** Array of tracks in playlist */\r\n\ttracks: MusicTrack[];\r\n\t/** Is the playlist collaborative/editable by other users on the platform? */\r\n\tcollaborative?: boolean;\r\n\t/** Service which is hosting the playlist */\r\n\tservice: Service;\r\n\t/** The original/raw data recieved when making the request */\r\n\toriginalData: any;\r\n}\r\n\r\nexport class MusicPlaylist {\r\n\t/** Friendly URL of the playlist */\r\n\turl: string;\r\n\t/** Name of the playlist */\r\n\tname: string;\r\n\tmetadata: {\r\n\t\t/** A reference to the user that queued the playlist - Can be set via {@link MusicPlaylist.setQueuedBy} or modified manually */\r\n\t\tqueuedBy?: any;\r\n\t\t/** Is the playlist collaborative/editable by other users on the platform?  */\r\n\t\tcollaborative?: boolean;\r\n\t\t/** ID of the playlist on the platform */\r\n\t\tid?: string;\r\n\t};\r\n\t/** Duration of all the tracks **in seconds** */\r\n\tduration: number;\r\n\t/** Duration of all the tracks **in timestamp** (e.g. `12:34`) */\r\n\tdurationTimestamp: string;\r\n\t/** Is the playlist an album? */\r\n\tisAlbum: boolean;\r\n\t/** Array of MusicTracks in playlist */\r\n\ttracks: MusicTrack[];\r\n\t/** Array of authors of the playlist. For example, a YouTube channel or SoundCloud user profile */\r\n\tauthor: Author[];\r\n\t/** The service providing the playlist */\r\n\tservice: Service;\r\n\t/** Thumbnail of the playlist */\r\n\tthumbnail?: string;\r\n\t/**\r\n\t * Original data retreieved from request to service's API.\r\n\t * There for debug and if theres any metadata not included in MusicTrack itself.\r\n\t */\r\n\toriginalData?: any;\r\n\r\n\t/**\r\n\t * An object that represents a music playlist. Refer to cheatsheet for data object parameters.\r\n\t */\r\n\tconstructor(data: MusicPlaylistConstructor) {\r\n\t\tthis.url = data.url;\r\n\t\tthis.name = data.name;\r\n\t\tthis.duration = data.duration;\r\n\t\tthis.durationTimestamp = getTimeFromSeconds(data.duration);\r\n\t\tthis.isAlbum = data.isAlbum || false;\r\n\t\tthis.tracks = data.tracks || [];\r\n\t\tthis.service = data.service;\r\n\t\tthis.thumbnail = data.thumbnail;\r\n\t\tif (!Array.isArray(data?.authors)) data.authors = [data.authors];\r\n\t\tthis.author = data.authors;\r\n\t\tthis.metadata = {\r\n\t\t\tqueuedBy: data.queuedBy,\r\n\t\t\tcollaborative: data.collaborative || false,\r\n\t\t\tid: data.id,\r\n\t\t};\r\n\t\tthis.originalData = data.originalData;\r\n\t}\r\n\r\n\t/**\r\n\t * Set who queued the playlist, for example the user's Discord ID.\r\n\t * This will also set who queued all the tracks.\r\n\t */\r\n\tsetQueuedBy(queuedBy: any) {\r\n\t\tthis.metadata.queuedBy = queuedBy;\r\n\t\tthis.tracks.forEach((t) => {\r\n\t\t\tt.setQueuedBy(queuedBy);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport interface QueueConstructor {\r\n\t/** Identifier for the queue */\r\n\tid: string;\r\n}\r\n\r\n// TODO: queues\r\nexport class Queue {\r\n\t/**\r\n\t * Represents a queue\r\n\t * @param data\r\n\t */\r\n\tconstructor(data: any = {}) {}\r\n}\r\n"]}