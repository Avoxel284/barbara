{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/lib/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module\n */\n\nimport { Readable } from \"stream\";\nimport { debugLog, getTimeFromSeconds } from \"./util\";\nimport prism from \"prism-media\";\nimport axios from \"axios\";\n\nexport interface SearchOptions {\n\t/** Service to search track on */\n\tservice: Service;\n\t/** Maximum results to return */\n\tlimit?: number;\n\t/**\n\t * Type of results to return\n\t * In the case of YouTube, `tracks` are videos, `playlists` are playlists and `albums` are.. not a thing\n\t */\n\ttype: \"tracks\" | \"playlists\" | \"albums\";\n}\n\n/** Type of media - Is it a MusicTrack or MusicPlaylist? */\nexport type BarbaraType = MusicTrack | MusicPlaylist;\n\n/**\n * A service that provides the media.\n */\nexport enum Service {\n\t/** Spotify */\n\tspotify = \"spotify\",\n\t/** YouTube */\n\tyoutube = \"youtube\",\n\t/** SoundCloud */\n\tsoundcloud = \"soundcloud\",\n\t/** Audio File */\n\taudiofile = \"audiofile\",\n}\n\n/**\n * An audio format used for streaming.\n * Contains data such as the streaming URL, mime type and quality.\n */\nexport interface Audio {\n\t/** Audio URL */\n\turl: string;\n\t/** Audio quality */\n\tquality?: string;\n\t/** Audio duration **in seconds** */\n\tduration?: number;\n\t/** Audio protocol */\n\tprotocol?: string;\n\t/** Audio mime type */\n\tmimeType: string;\n\t/** Audio bitrate */\n\tbitrate?: number;\n\t/** Audio codec */\n\tcodec?: string;\n}\n\n/**\n * An author that represents an online user that created media/content.\n * Contains data such as friendly URL, avatar URL and name.\n */\nexport interface Author {\n\t/** Public page URL */\n\turl?: string;\n\t/** Avatar/Profile picture/Channel icon URL */\n\tavatar?: string;\n\t/** Name of author */\n\tname?: string;\n\t/** ID of author */\n\tid?: string;\n\t/** Is the author verified? */\n\tverified?: boolean;\n}\n\n/**\n * MusicTrack Data Constructor\n *\n * Interface for `data` parameter used when creating a new {@link MusicTrack}\n */\nexport interface MusicTrackConstructor {\n\t/** Name of track */\n\tname: string;\n\t/** Friendly URL of track */\n\turl: string;\n\t/** Service's ID of track */\n\tid?: string;\n\t/** URL of thumbnail */\n\tthumbnail: string;\n\t/** Author/artist of track */\n\tauthor: Author[] | Author;\n\t/** Reference of who queued the track */\n\tqueuedBy?: any;\n\t/** Duration of the track in seconds */\n\tduration: number;\n\t/** Is the track live? */\n\tlive?: boolean;\n\t/** Is the track explicit? */\n\texplicit?: any;\n\t/** Is the track in a playlist? Set true wehn adding to `MusicPlaylist.tracks` */\n\tplaylisted?: boolean;\n\t/** Service which is hosting the track */\n\tservice: Service;\n\t/** Audio data */\n\taudio?: Audio[];\n\t/** The original/raw data recieved when making the request */\n\toriginalData: any;\n}\n\nexport class MusicTrack {\n\t/** Friendly URL of the track (e.g. https://youtube.com/watch?v=videoid) */\n\turl: string;\n\t/** Name of the track */\n\tname: string;\n\t/** ID of the track (e.g. https://www.youtube.com/watch?v=dQw4w9WgXcQ --> `dQw4w9WgXcQ`) */\n\tid?: string;\n\t/** An object containing additional metadata that may not always be included; e.g. the user that queued the track */\n\tmetadata: {\n\t\t/** A reference to the user that queued the track - Can be set via {@link MusicTrack.setQueuedBy} or modified manually */\n\t\tqueuedBy?: any;\n\t\t/** Is the track deemed as explicit? */\n\t\texplicit?: boolean;\n\t};\n\t/** Duration of the track **in seconds** */\n\tduration: number;\n\t/** Duration of the track **in timestamp** (e.g. `12:34`) */\n\tdurationTimestamp: string;\n\t/** Is the track live-streaming? (e.g. a YouTube livestream) */\n\tlive: boolean;\n\t/** Has the track been playlisted? */\n\tplaylisted: boolean;\n\t/** The service providing track (e.g. YouTube) */\n\tservice: Service;\n\t/** Thumbnail URL of the track */\n\tthumbnail: string;\n\t/** Array of media urls. May be empty in the case that the service does not provide streaming. */\n\taudio: Audio[];\n\t/** An array of the authors of the music track. For example, a YouTube channel or SoundCloud user profile */\n\tauthor: Author[];\n\t/**\n\t * Original data retreieved from request to service's API.\n\t * For debug and if theres any data not included in MusicTrack itself thats needed.\n\t */\n\toriginalData?: any;\n\n\t/**\n\t * An object that represents a music track.\n\t *\n\t * @example\n\t * ```\n\t * let Track = new MusicTrack();\n\t * console.log(Track.url);\n\t * console.log(Track.name);\n\t * console.log(Track.duration);\n\t * ```\n\t */\n\tconstructor(data: MusicTrackConstructor) {\n\t\tthis.name = data.name || \"Unnamed MusicTrack\";\n\t\tthis.url = data.url;\n\t\tthis.id = data.id;\n\t\tthis.thumbnail = data.thumbnail;\n\t\tthis.duration = data.duration || 0;\n\t\tthis.durationTimestamp = getTimeFromSeconds(data.duration || 0);\n\t\tthis.live = data.live || false;\n\t\tthis.playlisted = data.playlisted || false;\n\t\tthis.service = data.service;\n\t\tthis.audio = data.audio || [];\n\t\tif (!Array.isArray(data?.author)) data.author = [data.author];\n\t\tthis.author = data.author;\n\t\tthis.metadata = {\n\t\t\tqueuedBy: data.queuedBy || null,\n\t\t\texplicit: data.explicit || false,\n\t\t};\n\t\tthis.originalData = data.originalData;\n\t}\n\n\t/**\n\t * Returns a **Prism Media FFmpeg** object.\n\t *\n\t * @example\n\t * ```\n\t * const resource = await discordVoice.createAudioResource(Track.resource());\n\t *\n\t * ```\n\t *\n\t * @param seek Number of seconds to seek in the track. Obviously defaults to 0\n\t * @param extraArgs An array of extra arguments to pass to Prism when creating the FFmpeg object.\n\t * Basically just your standard FFmpeg arguments but in array form. For example:\n\t * ```\n\t * \"-ar\",\n\t * \"48000\",\n\t * \"-ac\",\n\t * \"2\"\n\t * ```\n\t */\n\tasync resource(seek: number = 0, extraArgs?: any[]) {\n\t\tif (this.duration === 0) throw \"Track duration is 0\";\n\t\tif (seek < 0 || seek > this.duration) throw \"Seek is out of range for track\";\n\t\tconst args: any[] = [\n\t\t\t\"-ss\",\n\t\t\tseek,\n\t\t\t\"-i\",\n\t\t\t(await this.bestAudio()).url,\n\t\t\t// Do we analyze the duration????\n\t\t\t// \"-analyzeduration\",\n\t\t\t// \"0\",\n\t\t\t// \"-loglevel\",\n\t\t\t// \"48\",\n\t\t\t// XXX: is the format really opus???\n\t\t\t\"-f\",\n\t\t\t\"opus\",\n\t\t\t// Audio rate/resolution\n\t\t\t// \"-ar\",\n\t\t\t// \"48000\",\n\t\t\t// Audio channels\n\t\t\t\"-ac\",\n\t\t\t\"2\",\n\t\t];\n\t\tif (extraArgs) args.push(...extraArgs);\n\n\t\treturn new prism.FFmpeg({ args: args });\n\t}\n\n\t/**\n\t * Returns the best audio format.\n\t * **Note:** if SoundCloud is the service, `Audio.url` is changed to a time sensitive URL due to SoundCloud APIs.\n\t */\n\tasync bestAudio(): Promise<Audio> {\n\t\tif (this.audio == undefined || this.audio?.length == 0)\n\t\t\tthrow new Error(\"MusicTrack does not contain any audios\");\n\n\t\tif (this.service === Service.spotify) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Spotify does not provide streaming, thus cannot return audio.\" +\n\t\t\t\t\t\" Try searching for a similar track on a different service.\"\n\t\t\t);\n\t\t}\n\n\t\tif (this.service === Service.soundcloud) {\n\t\t\t// debugLog(this.audio);\n\t\t\tdebugLog(this.audio);\n\t\t\tlet best = this.audio\n\t\t\t\t.filter((a: Audio) => (a.mimeType ? a.mimeType.includes(\"audio/mpeg\") : false))\n\t\t\t\t.filter((a: Audio) => a.protocol?.includes(\"progressive\"))\n\t\t\t\t.filter((a: Audio) =>\n\t\t\t\t\ta.quality\n\t\t\t\t\t\t? a.quality.includes(\"sq\") || a.quality.includes(\"medium\") || a.quality.includes(\"low\")\n\t\t\t\t\t\t: false\n\t\t\t\t)?.[0];\n\t\t\t// debugLog()\n\t\t\tdebugLog(best);\n\n\t\t\tlet { data } = await axios.get(`${best.url}`).catch((err: Error) => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t\tbest.url = data.url;\n\t\t\treturn best;\n\t\t}\n\n\t\tif (this.service === Service.youtube) {\n\t\t\treturn this.audio[0];\n\t\t}\n\n\t\tif (this.service === Service.audiofile) {\n\t\t\treturn this.audio[0];\n\t\t}\n\n\t\tthrow new Error(\"An error occurred when attempting to find best audio\");\n\t}\n\n\t/**\n\t * Set who queued the track, for example the user's Discord ID\n\t */\n\tsetQueuedBy(queuedBy: any) {\n\t\tthis.metadata.queuedBy = queuedBy;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks the track for missing data and fetches it. Useful for YouTube searches where the data doesn't return audios\n\t */\n\tasync fetchFullTrack() {\n\t\tif (this.service === Service.youtube) {\n\t\t}\n\t}\n}\n\n/**\n * MusicPlaylist Data Constructor\n *\n * Interface for `data` parameter used when creating a new {@link MusicPlaylist}\n */\nexport interface MusicPlaylistConstructor {\n\t/** Name of playlist */\n\tname: string;\n\t/** Friendly URL of playlist */\n\turl: string;\n\t/** Service's ID of playlist */\n\tid?: string;\n\t/** URL of thumbnail */\n\tthumbnail: string;\n\t/** Author/artist of playlist */\n\tauthor: Author[] | Author;\n\t/** Duration of the track in seconds */\n\tduration: number;\n\t/** Reference of who queued the playlist */\n\tqueuedBy?: any;\n\t/** Is the playlist an album? */\n\tisAlbum?: boolean;\n\t/** Array of tracks in playlist */\n\ttracks: MusicTrack[];\n\t/** Is the playlist collaborative/editable by other users on the platform? */\n\tcollaborative?: boolean;\n\t/** Service which is hosting the playlist */\n\tservice: Service;\n\t/** The original/raw data recieved when making the request */\n\toriginalData: any;\n}\n\nexport class MusicPlaylist {\n\t/** Friendly URL of the playlist */\n\turl: string;\n\t/** Name of the playlist */\n\tname: string;\n\t/** ID of the playlist */\n\tid?: string;\n\tmetadata: {\n\t\t/** A reference to the user that queued the playlist - Can be set via {@link MusicPlaylist.setQueuedBy} or modified manually */\n\t\tqueuedBy?: any;\n\t\t/** Is the playlist collaborative/editable by other users on the platform?  */\n\t\tcollaborative?: boolean;\n\t};\n\t/** Duration of all the tracks **in seconds** */\n\tduration: number;\n\t/** Duration of all the tracks **in timestamp** (e.g. `12:34`) */\n\tdurationTimestamp: string;\n\t/** Is the playlist an album? */\n\tisAlbum: boolean;\n\t/** Array of MusicTracks in playlist */\n\ttracks: MusicTrack[];\n\t/** Array of authors of the playlist. For example, a YouTube channel or SoundCloud user profile */\n\tauthor: Author[];\n\t/** The service providing the playlist */\n\tservice: Service;\n\t/** Thumbnail of the playlist */\n\tthumbnail?: string;\n\t/**\n\t * Original data retreieved from request to service's API.\n\t * There for debug and if theres any metadata not included in MusicTrack itself.\n\t */\n\toriginalData?: any;\n\n\t/**\n\t * An object that represents a music playlist. Refer to cheatsheet for data object parameters.\n\t */\n\tconstructor(data: MusicPlaylistConstructor) {\n\t\tthis.url = data.url;\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\t// TODO: duration\n\t\tthis.duration = data.duration;\n\t\tthis.durationTimestamp = getTimeFromSeconds(data.duration);\n\t\tthis.isAlbum = data.isAlbum || false;\n\t\tthis.tracks = data.tracks || [];\n\t\tthis.service = data.service;\n\t\tthis.thumbnail = data.thumbnail;\n\t\tif (!Array.isArray(data?.author)) data.author = [data.author];\n\t\tthis.author = data.author;\n\t\tthis.metadata = {\n\t\t\tqueuedBy: data.queuedBy,\n\t\t\tcollaborative: data.collaborative || false,\n\t\t};\n\t\tthis.originalData = data.originalData;\n\t}\n\n\t/**\n\t * Set who queued the playlist, for example the user's Discord ID\n\t */\n\tsetQueuedBy(queuedBy: any) {\n\t\tthis.metadata.queuedBy = queuedBy;\n\t\treturn this;\n\t}\n}\n\n// TODO: queues\nexport class Queue {\n\t/**\n\t * Represents a queue\n\t * @param data\n\t */\n\tconstructor(data: any = {}) {}\n}\n"]}