{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module\n */\n\nimport {\n\tMusicTrack,\n\tMusicPlaylist,\n\tSearchOptions,\n\tService,\n\tAudio,\n\tAuthor,\n\tQueue,\n\tMusicTrackConstructor,\n\tMusicPlaylistConstructor,\n} from \"./lib\";\nimport { SoundCloud, SoundCloudSearch, SOUNDCLOUD_URL_PATTERN } from \"./services/SoundCloud\";\nimport { YouTube, YouTubeSearch } from \"./services/YouTube\";\nimport { Spotify, SpotifySearch, SPOTIFY_URL_PATTERN } from \"./services/Spotify\";\nimport { setKey, freeKeys, getKey, setKeyFile } from \"./lib/config\";\nimport { AudioFile, AUDIOFILE_URL_PATTERN } from \"./services/Arbitrary\";\nimport { debugLog } from \"./lib/util\";\n\n/**\n * Searches given keywords on SoundCloud, unless other service is specified in search options.\n *\n * @param query Search query\n * @param options Search options\n * @returns Array of MusicTrack objects\n */\nexport async function search(query: string, options: SearchOptions) {\n\tlet type: any;\n\n\toptions ??= {\n\t\tservice: Service.soundcloud,\n\t\ttype: \"tracks\",\n\t};\n\n\tswitch (options.service) {\n\t\tcase Service.soundcloud:\n\t\t\treturn await SoundCloudSearch(query, options.limit, options.type);\n\t\t\tbreak;\n\n\t\tcase Service.spotify:\n\t\t\tif (options.type == \"albums\") type = \"album\";\n\t\t\tif (options.type == \"playlists\") type = \"playlist\";\n\t\t\tif (options.type == \"tracks\") type = \"track\";\n\t\t\treturn await SpotifySearch(query, options.limit, type);\n\t\t\tbreak;\n\n\t\tcase Service.youtube:\n\t\t\tif (options.type == \"albums\") throw new Error(\"Albums do not exist on YouTube\");\n\t\t\tif (options.type == \"playlists\") type = \"playlist\";\n\t\t\tif (options.type == \"tracks\") type = \"video\";\n\t\t\treturn await YouTubeSearch(query, options.limit, type);\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Validate and get the service from a given URL.\n *\n * @returns Service or undefined\n */\nexport async function serviceFromURL(url: string): Promise<Service | undefined> {\n\turl = url.trim();\n\tif (url.length === 0) return;\n\tif (url.match(SOUNDCLOUD_URL_PATTERN)) return Service.soundcloud;\n\tif (url.match(SPOTIFY_URL_PATTERN)) return Service.spotify;\n\tif (url.match(AUDIOFILE_URL_PATTERN)) return Service.audiofile;\n}\n\n/**\n * Automatically matches and returns a MusicTrack or MusicPlaylist from a given service URL\n *\n * @example\n * ```\n * barbara.info(\"\").then((track) => {\n *\n * })\n * ```\n */\nexport async function info(url: string): Promise<MusicTrack | MusicPlaylist> {\n\turl = url.trim();\n\tlet service = await serviceFromURL(url);\n\tif (!url) throw \"URL empty\";\n\tdebugLog(`Getting info from ${url} :: Detected service: ${service}`);\n\n\tswitch (service) {\n\t\tcase Service.soundcloud:\n\t\t\treturn SoundCloud(url).catch((err) => {\n\t\t\t\tthrow err;\n\t\t\t});\n\n\t\tcase Service.spotify:\n\t\t\treturn Spotify(url);\n\t\t\tbreak;\n\n\t\tcase Service.youtube:\n\t\t\treturn YouTube(url);\n\t\t\tbreak;\n\n\t\tcase Service.audiofile:\n\t\t\treturn AudioFile(url, {});\n\t\t\tbreak;\n\t}\n\n\tthrow new Error(\"Invalid service\");\n}\n\nexport { MusicTrack, MusicPlaylist };\nexport { SearchOptions, Audio, Author, MusicTrackConstructor, MusicPlaylistConstructor };\nexport { Service };\n// export { SoundCloud };\n// export { Spotify };\nexport { setKey, freeKeys, getKey, setKeyFile };\n// export { YouTube, YouTubeSearch };\n"]}