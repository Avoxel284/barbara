{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module\r\n */\r\n\r\nimport {\r\n\tMusicTrack,\r\n\tMusicPlaylist,\r\n\tSearchOptions,\r\n\tService,\r\n\tAudio,\r\n\tAuthor,\r\n\tQueue,\r\n\tMusicTrackConstructor,\r\n\tMusicPlaylistConstructor,\r\n\tGeniusSong,\r\n} from \"./lib\";\r\nimport { SoundCloud_Info, SoundCloud_Search, SoundCloud_Validate } from \"./services/SoundCloud\";\r\nimport { YouTube_Info, YouTube_Search, YouTube_Validate } from \"./services/YouTube\";\r\nimport { Spotify_Info, Spotify_Search, Spotify_Validate } from \"./services/Spotify\";\r\nimport { setKey, freeKey, getKey, setKeyFile, setKeys } from \"./lib/config\";\r\nimport { AudioFile_Info, AudioFile_Validate } from \"./services/Arbitrary\";\r\nimport { debugLog } from \"./lib/util\";\r\nimport { searchGeniusSong, fetchGeniusSongLyrics } from \"./lib/genius\";\r\nimport { refreshTokens } from \"./lib/auth\";\r\n\r\n/**\r\n * Searches for tracks with given query on SoundCloud, unless other service and type is specified in search options.\r\n *\r\n * Note: For YouTube, option.type = `tracks` and `videos` are the same thing.\r\n *\r\n * @param query Search query\r\n * @param options Search options\r\n * @returns Array of MusicTrack or MusicPlaylist objects\r\n */\r\nexport async function search(\r\n\tquery: string,\r\n\toptions: SearchOptions = {}\r\n): Promise<MusicTrack[] | MusicPlaylist[]> {\r\n\tlet type: any;\r\n\toptions.limit ??= 1;\r\n\toptions.service ??= Service.youtube;\r\n\toptions.type ??= \"tracks\";\r\n\r\n\tswitch (options.service) {\r\n\t\tcase Service.soundcloud:\r\n\t\t\tif (options.type == \"videos\") throw new Error(\"Videos do not exist on SoundCloud\");\r\n\t\t\treturn await SoundCloud_Search(query, options.limit, options.type);\r\n\t\t\tbreak;\r\n\r\n\t\tcase Service.spotify:\r\n\t\t\tif (options.type == \"videos\") throw new Error(\"Videos do not exist on Spotify\");\r\n\t\t\tif (options.type == \"albums\") type = \"album\";\r\n\t\t\tif (options.type == \"playlists\") type = \"playlist\";\r\n\t\t\tif (options.type == \"tracks\") type = \"track\";\r\n\t\t\treturn await Spotify_Search(query, options.limit, type);\r\n\t\t\tbreak;\r\n\r\n\t\tcase Service.youtube:\r\n\t\t\tif (options.type == \"albums\") throw new Error(\"Albums do not exist on YouTube\");\r\n\t\t\tif (options.type == \"playlists\") type = \"playlist\";\r\n\t\t\tif (options.type == \"tracks\" || options.type == \"videos\") type = \"video\";\r\n\t\t\treturn await YouTube_Search(query, options.limit, type);\r\n\t\t\tbreak;\r\n\r\n\t\tcase Service.audiofile:\r\n\t\t\tthrow \"Bro really thought they could search for audio files\";\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tthrow new Error(\"Interesting how its impossible for this error to ever occur\");\r\n}\r\n\r\n/**\r\n * Validate and get the service from a given URL.\r\n *\r\n * @returns Service or undefined\r\n */\r\nexport async function serviceFromURL(url: string): Promise<Service | undefined> {\r\n\turl = url.trim();\r\n\tif (url.length === 0) return;\r\n\tif (YouTube_Validate(url)) return Service.youtube;\r\n\tif (SoundCloud_Validate(url)) return Service.soundcloud;\r\n\tif (Spotify_Validate(url)) return Service.spotify;\r\n\tif (AudioFile_Validate(url)) return Service.audiofile;\r\n}\r\n\r\n/**\r\n * Automatically matches and returns a MusicTrack or MusicPlaylist from a given service URL\r\n *\r\n * @example\r\n * ```\r\n * barbara.info(\"\").then((track) => {\r\n *\r\n * })\r\n * ```\r\n */\r\nexport async function info(url: string): Promise<MusicTrack | MusicPlaylist> {\r\n\turl = url.trim();\r\n\tlet service = await serviceFromURL(url);\r\n\tif (!url) throw \"URL empty\";\r\n\tdebugLog(`Getting info from ${url} :: Detected service: ${service}`);\r\n\r\n\tswitch (service) {\r\n\t\tcase Service.soundcloud:\r\n\t\t\treturn SoundCloud_Info(url).catch((err) => {\r\n\t\t\t\tthrow err;\r\n\t\t\t});\r\n\r\n\t\tcase Service.spotify:\r\n\t\t\treturn Spotify_Info(url);\r\n\t\t\tbreak;\r\n\r\n\t\tcase Service.youtube:\r\n\t\t\treturn YouTube_Info(url);\r\n\t\t\tbreak;\r\n\r\n\t\tcase Service.audiofile:\r\n\t\t\treturn AudioFile_Info(url, {});\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tthrow new Error(\"Invalid service\");\r\n}\r\n\r\nexport { MusicTrack, MusicPlaylist };\r\nexport { SearchOptions, Audio, Author, MusicTrackConstructor, MusicPlaylistConstructor };\r\nexport { Service };\r\n// export { SoundCloud };\r\n// export { Spotify };\r\nexport { setKey, freeKey, getKey, setKeyFile, setKeys, refreshTokens };\r\nexport { searchGeniusSong, fetchGeniusSongLyrics, GeniusSong };\r\n// export { YouTube, YouTubeSearch };\r\n"]}