{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/Arbitrary/index.ts"],"names":[],"mappings":";;;;;;AAKA,mCAA4E;AAC5E,kDAA0B;AAE1B,yCAA0C;AAC1C,oEAAsC;AAEtC,MAAM,sBAAsB,GAAa,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAGzD,QAAA,qBAAqB,GAAG,IAAI,MAAM,CAC9C,gCAAgC,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CACpE,CAAC;AAOK,KAAK,UAAU,SAAS,CAAC,GAAW,EAAE,UAAe;IAC3D,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACjB,IAAI,CAAC,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC1D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,6BAAqB,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAGzE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,eAAK;SACnC,GAAG,CAAC,GAAG,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,UAAU,EAAE,CAAC;SACnD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACd,MAAM,GAAG,CAAC;IACX,CAAC,CAAC,CAAC;IACJ,IAAA,eAAQ,EAAC,2BAA2B,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC/D,MAAM,IAAI,GAAG,MAAM,wBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE9C,OAAO,IAAI,gBAAU,CAAC;QACrB,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,qCAAqC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG;QAClE,GAAG,EAAE,GAAG;QACR,SAAS,EAAE,EAAE;QAEb,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC;QACnC,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,aAAO,CAAC,SAAS;QAC1B,KAAK,EAAE;YACN;gBACC,GAAG,EAAE,GAAG;gBACR,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;gBAC5B,QAAQ,EAAE,OAAO,CAAC,cAAc,CAAC;gBACjC,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC;gBACnC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;aACxB;SACD;QACD,MAAM,EAAE,EAAE;QACV,YAAY,EAAE,IAAI;KAClB,CAAC,CAAC;AACJ,CAAC;AApCD,8BAoCC","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module / Arbitrary\n */\n\nimport { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../lib\";\nimport axios from \"axios\";\nimport { getKey } from \"../../lib/config\";\nimport { debugLog } from \"../../lib/util\";\nimport metadata from \"music-metadata\";\n\nconst acceptedFileExtensions: string[] = [\"mp3\", \"mp4\", \"ogg\", \"wav\"];\n\n/** Pattern for validating Audio file URLs */\nexport const AUDIOFILE_URL_PATTERN = new RegExp(\n\t`^(https?):\\/\\/(www.)?(.*?)\\.(${acceptedFileExtensions.join(\"|\")})$`\n);\n\n/**\n * Returns {@link MusicTrack} with data from a given audio file URL\n *\n * @param reqOptions Additional options to pass to Axios when creating request (Refer to Axios documentation)\n */\nexport async function AudioFile(url: string, reqOptions: any): Promise<MusicTrack | MusicPlaylist> {\n\turl = url.trim();\n\tif (!url) throw new Error(\"Given AudioFile URL is null!\");\n\tif (!url.match(AUDIOFILE_URL_PATTERN))\n\t\tthrow new Error(\"Given AudioFile URL is invalid or not an audio file.\");\n\t// debugLog(data);\n\n\tconst { data, headers } = await axios\n\t\t.get(url, { responseType: \"stream\", ...reqOptions })\n\t\t.catch((err) => {\n\t\t\tthrow err;\n\t\t});\n\tdebugLog(`AudioFile Content Type: ${headers[\"content-type\"]}`);\n\tconst meta = await metadata.parseStream(data);\n\n\treturn new MusicTrack({\n\t\tname: url.match(/[^/\\\\&\\?]+\\.\\w{3,4}(?=([\\?&].*$|$))/)?.[0] || url,\n\t\turl: url,\n\t\tthumbnail: \"\",\n\t\t// thumbnail: Buffer.from(meta?.common?.picture?.[0]?.data),\n\t\tduration: meta.format.duration || 0,\n\t\tlive: false,\n\t\tservice: Service.audiofile,\n\t\taudio: [\n\t\t\t{\n\t\t\t\turl: url,\n\t\t\t\tbitrate: meta.format.bitrate,\n\t\t\t\tmimeType: headers[\"content-type\"],\n\t\t\t\tprotocol: \"progressive??\",\n\t\t\t\tduration: meta.format.duration || 0,\n\t\t\t\tcodec: meta.format.codec,\n\t\t\t},\n\t\t],\n\t\tauthor: {},\n\t\toriginalData: data,\n\t});\n}\n"]}