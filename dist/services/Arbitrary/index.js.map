{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/Arbitrary/index.ts"],"names":[],"mappings":";;;;;;AAMA,kDAA0B;AAE1B,yCAA0C;AAC1C,mCAAkD;AAClD,oEAAsC;AAEtC,MAAM,sBAAsB,GAAa,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAGzD,QAAA,qBAAqB,GAAG,IAAI,MAAM,CAC9C,gCAAgC,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CACpE,CAAC;AAOK,KAAK,UAAU,cAAc,CAAC,GAAW,EAAE,UAAe;IAChE,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACjB,IAAI,CAAC,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC1D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,6BAAqB,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAGzE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,eAAK;SACnC,GAAG,CAAC,GAAG,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,UAAU,EAAE,CAAC;SACnD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QACd,MAAM,GAAG,CAAC;IACX,CAAC,CAAC,CAAC;IACJ,IAAA,eAAQ,EAAC,2BAA2B,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAE/D,OAAO,IAAA,+BAAuB,EAAC;QAC9B,GAAG,EAAE,GAAG;QACR,GAAG,IAAI;QACP,OAAO,EAAE,OAAO;QAChB,IAAI,EAAE,MAAM,wBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC;KACtC,CAAC,CAAC;AAIJ,CAAC;AAvBD,wCAuBC;AAKD,SAAgB,kBAAkB,CAAC,GAAW;IAC7C,OAAO,GAAG,CAAC,KAAK,CAAC,6BAAqB,CAAC,CAAC;AACzC,CAAC;AAFD,gDAEC","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module / Arbitrary\n */\n\nimport { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../lib\";\nimport axios from \"axios\";\nimport { getKey } from \"../../lib/config\";\nimport { debugLog } from \"../../lib/util\";\nimport { MusicTrackFromAudioFile } from \"./parse\";\nimport metadata from \"music-metadata\";\n\nconst acceptedFileExtensions: string[] = [\"mp3\", \"mp4\", \"ogg\", \"wav\"];\n\n/** Pattern for validating Audio file URLs */\nexport const AUDIOFILE_URL_PATTERN = new RegExp(\n\t`^(https?):\\/\\/(www.)?(.*?)\\.(${acceptedFileExtensions.join(\"|\")})$`\n);\n\n/**\n * Returns {@link MusicTrack} with data from a given audio file URL\n *\n * @param reqOptions Additional options to pass to Axios when creating request (Refer to Axios documentation)\n */\nexport async function AudioFile_Info(url: string, reqOptions: any): Promise<MusicTrack> {\n\turl = url.trim();\n\tif (!url) throw new Error(\"Given AudioFile URL is null!\");\n\tif (!url.match(AUDIOFILE_URL_PATTERN))\n\t\tthrow new Error(\"Given AudioFile URL is invalid or not an audio file.\");\n\t// debugLog(data);\n\n\tconst { data, headers } = await axios\n\t\t.get(url, { responseType: \"stream\", ...reqOptions })\n\t\t.catch((err) => {\n\t\t\tthrow err;\n\t\t});\n\tdebugLog(`AudioFile Content Type: ${headers[\"content-type\"]}`);\n\n\treturn MusicTrackFromAudioFile({\n\t\turl: url,\n\t\t...data,\n\t\theaders: headers,\n\t\tmeta: await metadata.parseStream(data),\n\t});\n\n\t// call it unneccessary but at least all the data is in original data\n\t// and its neater/more modular this way\n}\n\n/**\n * Check a URL and validate if it is a Audio File URL\n */\nexport function AudioFile_Validate(url: string) {\n\treturn url.match(AUDIOFILE_URL_PATTERN);\n}\n"]}