{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/SoundCloud/index.ts"],"names":[],"mappings":";;;;;;AAMA,kDAA0B;AAC1B,mCAAgF;AAChF,6CAA0C;AAG7B,QAAA,sBAAsB,GAClC,0FAA0F,CAAC;AAKrF,KAAK,UAAU,eAAe,CAAC,GAAW;IAChD,IAAI,QAAQ,GAAG,MAAM,IAAA,eAAM,EAAC,qBAAqB,CAAC,CAAC;IAEnD,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACjB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,8BAAsB,CAAC;QACrC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC5D,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK;SAC1B,GAAG,CAAC,6CAA6C,GAAG,cAAc,QAAQ,EAAE,CAAC;SAC7E,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACrB,MAAM,GAAG,CAAC;IACX,CAAC,CAAC,CAAC;IAEJ,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;QAC1B,OAAO,IAAA,gCAAwB,EAAC,IAAI,CAAC,CAAC;KACtC;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;QAC7B,OAAO,IAAA,mCAA2B,EAAC,IAAI,CAAC,CAAC;KACzC;IAED,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;AAC1D,CAAC;AArBD,0CAqBC;AAKM,KAAK,UAAU,iBAAiB,CACtC,KAAa,EACb,QAAgB,EAAE,EAClB,OAA0C,QAAQ;IAElD,IAAI,QAAQ,GAAG,MAAM,IAAA,eAAM,EAAC,qBAAqB,CAAC,CAAC;IACnD,IAAI,CAAC,QAAQ;QAAE,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACnE,IAAI,CAAC,KAAK;QAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAE/C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK;SAC1B,GAAG,CACH,wCAAwC,IAAI,MAAM,kBAAkB,CACnE,KAAK,CACL,cAAc,QAAQ,UAAU,KAAK,EAAE,CACxC;SACA,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACrB,MAAM,GAAG,CAAC;IACX,CAAC,CAAC,CAAC;IAEJ,IAAI,IAAI,KAAK,QAAQ,EAAE;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,IAAA,gCAAwB,EAAC,CAAC,CAAC,CAAC,CAAC;KACpE;IAED,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,WAAW,EAAE;QAC9C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,IAAA,mCAA2B,EAAC,CAAC,CAAC,CAAC,CAAC;KACvE;IAED,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;AAC1D,CAAC;AA5BD,8CA4BC;AAKD,SAAgB,mBAAmB,CAAC,GAAW;IAC9C,OAAO,GAAG,CAAC,KAAK,CAAC,8BAAsB,CAAC,CAAC;AAC1C,CAAC;AAFD,kDAEC","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module / SoundCloud\n */\n\nimport { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../lib\";\nimport axios from \"axios\";\nimport { MusicTrackFromSoundCloud, MusicPlaylistFromSoundCloud } from \"./parse\";\nimport { getKey } from \"../../lib/config\";\n\n/** URL pattern for SoundCloud - ripped from play-dl */\nexport const SOUNDCLOUD_URL_PATTERN =\n\t/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?(api\\.soundcloud\\.com|soundcloud\\.com|snd\\.sc)\\/(.*)$/;\n\n/**\n * Returns {@link MusicTrack} or {@link MusicPlaylist} with data from SoundCloud from a given resource URL\n */\nexport async function SoundCloud_Info(url: string): Promise<MusicTrack | MusicPlaylist> {\n\tlet clientId = await getKey(\"SOUNDCLOUD_CLIENTID\");\n\n\turl = url.trim();\n\tif (!url.match(SOUNDCLOUD_URL_PATTERN))\n\t\tthrow new Error(`Given URL is not a valid SoundCloud URL`);\n\tconst { data } = await axios\n\t\t.get(`https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${clientId}`)\n\t\t.catch((err: Error) => {\n\t\t\tthrow err;\n\t\t});\n\n\tif (data.kind === \"track\") {\n\t\treturn MusicTrackFromSoundCloud(data);\n\t}\n\n\tif (data.kind === \"playlist\") {\n\t\treturn MusicPlaylistFromSoundCloud(data);\n\t}\n\n\tthrow new Error(\"SoundCloud returned unknown resource.\");\n}\n\n/**\n * Searches for a SoundCloud track or playlist and returns with an array of {@link MusicTrack} or {@link MusicPlaylist}\n */\nexport async function SoundCloud_Search(\n\tquery: string,\n\tlimit: number = 20,\n\ttype: \"tracks\" | \"playlists\" | \"albums\" = \"tracks\"\n): Promise<MusicTrack[] | MusicPlaylist[]> {\n\tlet clientId = await getKey(\"SOUNDCLOUD_CLIENTID\");\n\tif (!clientId) throw new Error(\"SoundCloud Client ID is not set!\");\n\tif (!query) throw new Error(\"No query given!\");\n\n\tconst { data } = await axios\n\t\t.get(\n\t\t\t`https://api-v2.soundcloud.com/search/${type}?q=${encodeURIComponent(\n\t\t\t\tquery\n\t\t\t)}&client_id=${clientId}&limit=${limit}`\n\t\t)\n\t\t.catch((err: Error) => {\n\t\t\tthrow err;\n\t\t});\n\n\tif (type === \"tracks\") {\n\t\treturn data.collection.map((d: any) => MusicTrackFromSoundCloud(d));\n\t}\n\n\tif (type === \"albums\" || type === \"playlists\") {\n\t\treturn data.collection.map((d: any) => MusicPlaylistFromSoundCloud(d));\n\t}\n\n\tthrow new Error(\"SoundCloud returned unknown resource.\");\n}\n\n/**\n * Check a URL and validate if it is a SoundCloud URL\n */\nexport function SoundCloud_Validate(url: string) {\n\treturn url.match(SOUNDCLOUD_URL_PATTERN);\n}\n"]}