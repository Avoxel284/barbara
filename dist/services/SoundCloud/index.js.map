{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/SoundCloud/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../classes\";\nimport axios from \"axios\";\n\nlet clientId = \"\";\n\n/** URL pattern for SoundCloud - ripped from play-dl */\nconst SOUNDCLOUD_URL_PATTERN =\n\t/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?(api\\.soundcloud\\.com|soundcloud\\.com|snd\\.sc)\\/(.*)$/;\n\n/** Generate MusicTrack from SoundCloud data */\nconst MusicTrackFromSoundCloud = (data: any) =>\n\tnew MusicTrack({\n\t\tname: data.title,\n\t\turl: data.url,\n\t\tduration: Number(data.duration) / 1000,\n\t\tauthor: {\n\t\t\turl: data?.user?.permalink_url,\n\t\t\tname: data?.user?.username,\n\t\t\tavatar: data?.user?.avatar_url,\n\t\t\tid: data?.user?.id,\n\t\t\tverified: data?.user?.verified,\n\t\t},\n\t\tthumbnail: { url: data.artwork_url },\n\t\tservice: Service.soundcloud,\n\t\taudio: data.media.transcodings.map((a: any) => {\n\t\t\treturn {\n\t\t\t\turl: a.url + `?client_id=${clientId}`,\n\t\t\t\tquality: a.quality,\n\t\t\t\tduration: a.duration,\n\t\t\t\tprotocol: a.format?.protocol,\n\t\t\t\tmimeType: a.format?.mime_type,\n\t\t\t};\n\t\t}),\n\t\toriginalData: data,\n\t});\n\n/** Generate MusicPlaylist from SoundCloud data */\nconst MusicPlaylistFromSoundCloud = (data: any) =>\n\tnew MusicPlaylist({\n\t\turl: data.permalink_url,\n\t\tname: data.title,\n\t\tduration: Number(data.duration) / 1000,\n\t\tauthor: {\n\t\t\turl: data?.user?.permalink_url,\n\t\t\tname: data?.user?.username,\n\t\t\tavatar: data?.user?.avatar_url,\n\t\t\tid: data?.user?.id,\n\t\t},\n\t\tthumbnail: { url: data.artwork_url },\n\t\tservice: Service.soundcloud,\n\t\tisAlbum: data.set_type == \"album\",\n\t\ttracks: data.tracks.filter((t: any) => t?.title?.length > 0).map(MusicTrackFromSoundCloud),\n\t\toriginalData: data,\n\t});\n\n/**\n * Returns a free client ID - ripped from play-dl\n */\nexport async function getClientId(): Promise<string> {\n\tconst { data } = await axios.get(\"https://soundcloud.com/\").catch((err: Error) => {\n\t\tthrow err;\n\t});\n\tconst urls: string[] = [];\n\tdata.split('<script crossorigin src=\"').forEach((r: string) => {\n\t\tif (r.startsWith(\"https\")) urls.push(r.split('\"')[0]);\n\t});\n\tconst { data: data2 } = await axios.get(urls[urls.length - 1]).catch((err: Error) => {\n\t\tthrow err;\n\t});\n\treturn data2.split(',client_id:\"')[1].split('\"')[0];\n}\n\n/**\n * Returns MusicTrack or MusicPlaylist with information from SoundCloud\n */\nexport async function SoundCloud(url: string): Promise<MusicTrack | MusicPlaylist> {\n\tclientId = await getClientId();\n\tconsole.log(clientId);\n\n\turl = url.trim();\n\tif (!url.match(SOUNDCLOUD_URL_PATTERN))\n\t\tthrow new Error(`Given URL is not a valid SoundCloud URL`);\n\tconst { data } = await axios\n\t\t.get(`https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${clientId}`)\n\t\t.catch((err: Error) => {\n\t\t\tthrow err;\n\t\t});\n\n\tif (data.kind === \"track\") return MusicTrackFromSoundCloud(data);\n\telse if (data.kind === \"playlist\") return MusicPlaylistFromSoundCloud(data);\n\telse throw new Error(\"SoundCloud returned unknown resource\");\n}\n\n/**\n * Searches for a SoundCloud track or playlist\n */\nexport async function SoundCloudSearch(\n\tquery: string,\n\tlimit: number,\n\ttype: \"tracks\" | \"playlists\" | \"albums\" = \"tracks\"\n): Promise<BarbaraType[]> {\n\tclientId = await getClientId();\n\tconsole.log(clientId);\n\n\tlet results: BarbaraType[] = [];\n\tconst { data } = await axios\n\t\t.get(\n\t\t\t`https://api-v2.soundcloud.com/search/${type}?q=${query}&client_id=${clientId}&limit=${limit}`\n\t\t)\n\t\t.catch((err: Error) => {\n\t\t\tthrow err;\n\t\t});\n\n\tif (type === \"tracks\")\n\t\tdata.collection.forEach((d: any) => results.push(MusicTrackFromSoundCloud(d)));\n\telse if (type === \"albums\" || type === \"playlists\")\n\t\tdata.collection.forEach((d: any) => results.push(MusicPlaylistFromSoundCloud(d)));\n\telse {\n\t\tthrow new Error(\"Unknown SoundCloud resource type\");\n\t}\n\n\treturn results;\n}\n\n// export async function SoundCloudStream(mt: MusicTrack) {\n// \tif (mt.service !== Service.soundcloud)\n// \t\tthrow Error(\"MusicTrack service is not SoundCloud, thus cannot be streamed\");\n\n// \tconst HLSformats = parseHlsFormats(data.formats);\n// \tif (typeof quality !== \"number\") quality = HLSformats.length - 1;\n// \telse if (quality <= 0) quality = 0;\n// \telse if (quality >= HLSformats.length) quality = HLSformats.length - 1;\n// \tconst req_url = HLSformats[quality].url + \"?client_id=\" + soundData.client_id;\n// \tconsole.log(req_url);\n// \tconst s_data = JSON.parse(await request(req_url));\n// \tconst type = HLSformats[quality].format.mime_type.startsWith(\"audio/ogg\")\n// \t\t? StreamType.OggOpus\n// \t\t: StreamType.Arbitrary;\n// \treturn new SoundCloudStream(s_data.url, type);\n// }\n"]}