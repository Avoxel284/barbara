{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../src/services/YouTube/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import { MusicPlaylist, MusicTrack, Service } from \"../../classes\";\r\nimport { getSecondsFromTime, getTimeFromSeconds } from \"../../util\";\r\nimport { Audio } from \"../../classes\";\r\n\r\n/**\r\n * Parse a MusicTrack from YouTube video page data.\r\n * Some code was ripped from play-dl\r\n */\r\nexport function MusicTrackFromYouTube(data: any) {\r\n\tlet playerData = data\r\n\t\t.split(\"var ytInitialPlayerResponse = \")?.[1]\r\n\t\t?.split(\";</script>\")[0]\r\n\t\t.split(/;\\s*(var|const|let)\\s/)[0];\r\n\tif (!playerData) throw new Error(\"Failed to extract player data from YouTube video HTML\");\r\n\r\n\tlet initialData = data\r\n\t\t.split(\"var ytInitialData = \")?.[1]\r\n\t\t?.split(\";</script>\")[0]\r\n\t\t.split(/;\\s*(var|const|let)\\s/)[0];\r\n\tif (!initialData) throw new Error(\"Failed to extract initial data from YouTube video HTML\");\r\n\r\n\tplayerData = JSON.parse(playerData);\r\n\tinitialData = JSON.parse(initialData);\r\n\r\n\tif (playerData.playabilityStatus.status !== \"OK\") {\r\n\t\tif (playerData.playabilityStatus.status === \"CONTENT_CHECK_REQUIRED\") {\r\n\t\t\t// const cookies =\r\n\t\t\t// \tinitialData.topbar.desktopTopbarRenderer.interstitial?.consentBumpV2Renderer.agreeButton\r\n\t\t\t// \t\t.buttonRenderer.command.saveConsentAction;\r\n\t\t\t// if (cookies) {\r\n\t\t\t// \tObject.assign(cookieJar, {\r\n\t\t\t// \t\tVISITOR_INFO1_LIVE: cookies.visitorCookie,\r\n\t\t\t// \t\tCONSENT: cookies.consentCookie,\r\n\t\t\t// \t});\r\n\t\t\t// }\r\n\t\t\t// const updatedValues = await acceptViewerDiscretion(vid.videoId, cookieJar, body, true);\r\n\t\t\t// playerData.streamingData = updatedValues.streamingData;\r\n\t\t\t// initialData.contents.twoColumnWatchNextResults.secondaryResults = updatedValues.relatedVideos;\r\n\t\t} else if (playerData.playabilityStatus.status === \"LIVE_STREAM_OFFLINE\") {\r\n\t\t\tthrow new Error(\"Livestream has not begun yet\");\r\n\t\t\t// upcoming = true;\r\n\t\t\t// upcoming live stream\r\n\t\t} else\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Error occurred when scraping data from YouTube video: \\n${\r\n\t\t\t\t\tplayerData.playabilityStatus.errorScreen.playerErrorMessageRenderer?.reason.simpleText ??\r\n\t\t\t\t\tplayerData.playabilityStatus.errorScreen.playerKavRenderer?.reason.simpleText ??\r\n\t\t\t\t\tplayerData.playabilityStatus.reason\r\n\t\t\t\t}`\r\n\t\t\t);\r\n\t}\r\n\r\n\tconst videoData = playerData.videoDetails;\r\n\tconsole.log(\"video data\", videoData);\r\n\tconst musicData =\r\n\t\tinitialData.contents.twoColumnWatchNextResults.results.results.contents?.[1]\r\n\t\t\t?.videoSecondaryInfoRenderer?.metadataRowContainer?.metadataRowContainerRenderer?.rows;\r\n\r\n\t// TODO: Music metadata\r\n\tif (musicData)\r\n\t\tmusicData.forEach((m: any) => {\r\n\t\t\t// console.log(m);\r\n\t\t\t// if (!m.metadataRowRenderer) return;\r\n\t\t\t// const row = m.metadataRowRenderer;\r\n\t\t\t// const title = row.title.simpleText ?? row.title.runs[0].text;\r\n\t\t\t// const contents = row.contents[0].simpleText ?? row.contents[0]?.runs?.[0]?.text;\r\n\t\t\t// const url =\r\n\t\t\t// \trow.contents[0]?.runs?.[0]?.navigationEndpoint?.commandMetadata?.webCommandMetadata.url;\r\n\t\t\t// if (music.length === 0) music.push({});\r\n\t\t\t// music[music.length - 1][title.toLowerCase()] = url\r\n\t\t\t// \t? { text: contents, url: `https://www.youtube.com${url}` }\r\n\t\t\t// \t: contents;\r\n\t\t\t// if (row.hasDividerLine) music.push({});\r\n\t\t});\r\n\r\n\tlet audios: Audio[] = [];\r\n\tif (playerData.streamingData.formats)\r\n\t\tplayerData.streamingData.formats.forEach((m: any) => {\r\n\t\t\treturn audios.push();\r\n\t\t});\r\n\t// let audios =\r\n\tconsole.log(playerData.streamingData.formats);\r\n\tconsole.log(playerData.streamingData.adaptiveFormats);\r\n\r\n\treturn new MusicTrack({\r\n\t\turl: `https://www.youtube.com/watch?v=${videoData.videoId}`,\r\n\t\tid: videoData.videoId,\r\n\t\tname: videoData.title,\r\n\t\t// description: videoData.shortDescription,\r\n\t\tduration: Number(videoData.lengthSeconds),\r\n\t\tdurationTime: getTimeFromSeconds(videoData.lengthSeconds),\r\n\t\tthumbnail: videoData.thumbnail.thumbnails[0].url,\r\n\t\tauthor: {\r\n\t\t\tname: videoData.author,\r\n\t\t\tid: videoData.channelId,\r\n\t\t\turl: `https://www.youtube.com/channel/${videoData.channelId}`,\r\n\t\t\tavatar:\r\n\t\t\t\tinitialData.contents.twoColumnWatchNextResults.results?.results?.contents[1]\r\n\t\t\t\t\t?.videoSecondaryInfoRenderer?.owner?.videoOwnerRenderer?.thumbnail?.thumbnails?.[0],\r\n\t\t},\r\n\t\taudio: audios,\r\n\t\tlive: videoData.isLiveContent,\r\n\t\tservice: Service.youtube,\r\n\t\toriginalData: videoData,\r\n\t});\r\n}\r\n\r\n/**\r\n * Parse a MusicTrack from YouTube search page data.\r\n * Some code was ripped from play-dl\r\n */\r\nexport function MusicTrackFromYouTubeSearch(data: any) {\r\n\tif (!data || !data.videoRenderer) throw new Error(\"No data given\");\r\n\r\n\tconst channel = data.videoRenderer.ownerText.runs[0];\r\n\tconst duration = data.videoRenderer.lengthText;\r\n\tconst thumbnail =\r\n\t\tdata.videoRenderer.thumbnail.thumbnails[data.videoRenderer.thumbnail.thumbnails.length - 1];\r\n\tconst avatar =\r\n\t\tdata.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail\r\n\t\t\t.thumbnails[0];\r\n\r\n\treturn new MusicTrack({\r\n\t\turl: `https://www.youtube.com/watch?v=${data.videoRenderer.videoId}`,\r\n\t\tname: data.videoRenderer.title.runs[0].text,\r\n\t\tid: data.videoRenderer.videoId,\r\n\t\t// description: data.videoRenderer.detailedMetadataSnippets?.[0].snippetText.runs.length\r\n\t\t// \t? data.videoRenderer.detailedMetadataSnippets[0].snippetText.runs\r\n\t\t// \t\t\t.map((run: any) => run.text)\r\n\t\t// \t\t\t.join(\"\")\r\n\t\t// \t: \"\",\r\n\t\tduration: duration ? getSecondsFromTime(duration.simpleText) : 0,\r\n\t\tdurationTimestamp: duration ? duration.simpleText : null,\r\n\t\tthumbnail: thumbnail?.url,\r\n\t\tauthor: {\r\n\t\t\tid: channel.navigationEndpoint.browseEndpoint.browseId || null,\r\n\t\t\tname: channel.text || null,\r\n\t\t\turl: `https://www.youtube.com${\r\n\t\t\t\tchannel.navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\r\n\t\t\t\tchannel.navigationEndpoint.commandMetadata.webCommandMetadata.url\r\n\t\t\t}`,\r\n\t\t\tavatar: avatar,\r\n\t\t},\r\n\t\tlive: duration ? false : true,\r\n\t\tservice: Service.youtube,\r\n\t\toriginalData: data.videoRenderer,\r\n\t});\r\n}\r\n\r\n/**\r\n * Parse a MusicPlaylist from YouTube playlist page.\r\n * Some code was ripped from play-dl\r\n */\r\nexport function MusicPlaylistFromYouTube(data: any) {\r\n\treturn new MusicPlaylist({\r\n\t\turl: \"\",\r\n\r\n\t\tservice: Service.youtube,\r\n\t});\r\n}\r\n"]}