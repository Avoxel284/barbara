{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/YouTube/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../classes\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tMusicPlaylistFromYouTube,\r\n\tMusicTrackFromYouTube,\r\n\tMusicTrackFromYouTubeSearch,\r\n} from \"./parse\";\r\nimport { isDebug } from \"../../config\";\r\n\r\n/**\r\n * Returns {@link MusicTrack} or {@link MusicPlaylist} from a given YouTube URL\r\n * Some code was ripped from play-dl\r\n */\r\nexport async function YouTube(url: string): Promise<MusicTrack | MusicPlaylist> {\r\n\turl = url.trim();\r\n\t// if (!url.match(YOUTUBE_URL_PATTERN)) throw new Error(`Given URL is not a valid YouTube URL`);\r\n\r\n\tlet videoId;\r\n\tif (url.includes(\"youtu.be/\")) {\r\n\t\tvideoId = url.split(\"youtu.be/\")[1].split(/(\\?|\\/|&)/)[0];\r\n\t} else if (url.includes(\"youtube.com/embed/\")) {\r\n\t\tvideoId = url.split(\"youtube.com/embed/\")[1].split(/(\\?|\\/|&)/)[0];\r\n\t} else if (url.includes(\"youtube.com/shorts/\")) {\r\n\t\tvideoId = url.split(\"youtube.com/shorts/\")[1].split(/(\\?|\\/|&)/)[0];\r\n\t} else {\r\n\t\tvideoId = (url.split(\"watch?v=\")[1] ?? url.split(\"&v=\")[1]).split(/(\\?|\\/|&)/)[0];\r\n\t}\r\n\tif (!videoId) throw new Error(\"Given URL is not a valid YouTube URL\");\r\n\r\n\tconst { data: html } = await axios\r\n\t\t.get(`https://www.youtube.com/watch?v=${videoId}&has_verified=1`, {\r\n\t\t\theaders: {\r\n\t\t\t\t\"accept-language\": \"en-US;q=0.9\",\r\n\t\t\t\tCookie: \"\",\r\n\t\t\t\t\"User-Agent\":\r\n\t\t\t\t\t\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36\",\r\n\t\t\t},\r\n\t\t})\r\n\t\t.catch((err: Error) => {\r\n\t\t\tthrow err;\r\n\t\t});\r\n\r\n\tif (html.includes(\"Our systems have detected unusual traffic from your computer network.\"))\r\n\t\tthrow new Error(\"YouTube detected we're a bot.. thanks youtube.\");\r\n\r\n\t// \tconst rawChapters =\r\n\t// \tinitial_response.playerOverlays.playerOverlayRenderer.decoratedPlayerBarRenderer?.decoratedPlayerBarRenderer.playerBar?.multiMarkersPlayerBarRenderer.markersMap.find(\r\n\t// \t\t(m: any) => m.key === \"DESCRIPTION_CHAPTERS\"\r\n\t// \t)?.value?.chapters;\r\n\t// const chapters: VideoChapter[] = [];\r\n\t// if (rawChapters) {\r\n\t// \tfor (const { chapterRenderer } of rawChapters) {\r\n\t// \t\tchapters.push({\r\n\t// \t\t\ttitle: chapterRenderer.title.simpleText,\r\n\t// \t\t\ttimestamp: parseSeconds(chapterRenderer.timeRangeStartMillis / 1000),\r\n\t// \t\t\tseconds: chapterRenderer.timeRangeStartMillis / 1000,\r\n\t// \t\t\tthumbnails: chapterRenderer.thumbnail.thumbnails,\r\n\t// \t\t});\r\n\t// \t}\r\n\t// }\r\n\r\n\treturn MusicTrackFromYouTube(html);\r\n\r\n\t// -------------\r\n\r\n\t// let upcomingDate;\r\n\t// if (upcoming) {\r\n\t// \tif (microformat.liveBroadcastDetails.startTimestamp)\r\n\t// \t\tupcomingDate = new Date(microformat.liveBroadcastDetails.startTimestamp);\r\n\t// \telse {\r\n\t// \t\tconst timestamp =\r\n\t// \t\t\tplayer_response.playabilityStatus.liveStreamability.liveStreamabilityRenderer.offlineSlate\r\n\t// \t\t\t\t.liveStreamOfflineSlateRenderer.scheduledStartTime;\r\n\t// \t\tupcomingDate = new Date(parseInt(timestamp) * 1000);\r\n\t// \t}\r\n\t// }\r\n\t// const video_details = new YouTubeVideo({\r\n\t// \tid: vid.videoId,\r\n\t// \ttitle: vid.title,\r\n\t// \tdescription: vid.shortDescription,\r\n\t// \tduration: Number(vid.lengthSeconds),\r\n\t// \tduration_raw: parseSeconds(vid.lengthSeconds),\r\n\t// \tuploadedAt: microformat.publishDate,\r\n\t// \tliveAt: microformat.liveBroadcastDetails?.startTimestamp,\r\n\t// \tupcoming: upcomingDate,\r\n\t// \tthumbnails: vid.thumbnail.thumbnails,\r\n\t// \tchannel: {\r\n\t// \t\tname: vid.author,\r\n\t// \t\tid: vid.channelId,\r\n\t// \t\turl: `https://www.youtube.com/channel/${vid.channelId}`,\r\n\t// \t\tverified: Boolean(badge?.includes(\"verified\")),\r\n\t// \t\tartist: Boolean(badge?.includes(\"artist\")),\r\n\t// \t\ticons: ownerInfo?.thumbnail?.thumbnails || undefined,\r\n\t// \t},\r\n\t// \tviews: vid.viewCount,\r\n\t// \ttags: vid.keywords,\r\n\t// \tlikes: parseInt(\r\n\t// \t\tinitial_response.contents.twoColumnWatchNextResults.results.results.contents\r\n\t// \t\t\t.find((content: any) => content.videoPrimaryInfoRenderer)\r\n\t// \t\t\t?.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons?.find(\r\n\t// \t\t\t\t(button: any) => button.toggleButtonRenderer.defaultIcon.iconType === \"LIKE\"\r\n\t// \t\t\t)\r\n\t// \t\t\t?.toggleButtonRenderer.defaultText.accessibility?.accessibilityData.label.replace(\r\n\t// \t\t\t\t/\\D+/g,\r\n\t// \t\t\t\t\"\"\r\n\t// \t\t\t) ?? 0\r\n\t// \t),\r\n\t// \tlive: vid.isLiveContent,\r\n\t// \tprivate: vid.isPrivate,\r\n\t// \tdiscretionAdvised,\r\n\t// \tmusic,\r\n\t// \tchapters,\r\n\t// });\r\n\t// let format = [];\r\n\t// if (!upcoming) {\r\n\t// \tformat.push(...(player_response.streamingData.formats ?? []));\r\n\t// \tformat.push(...(player_response.streamingData.adaptiveFormats ?? []));\r\n\r\n\t// \t// get the formats for the android player for legacy videos\r\n\t// \t// fixes the stream being closed because not enough data\r\n\t// \t// arrived in time for ffmpeg to be able to extract audio data\r\n\t// \tif (parseAudioFormats(format).length === 0 && !options.htmldata) {\r\n\t// \t\tformat = await getAndroidFormats(vid.videoId, cookieJar, body);\r\n\t// \t}\r\n\t// }\r\n\t// const LiveStreamData = {\r\n\t// \tisLive: video_details.live,\r\n\t// \tdashManifestUrl: player_response.streamingData?.dashManifestUrl ?? null,\r\n\t// \thlsManifestUrl: player_response.streamingData?.hlsManifestUrl ?? null,\r\n\t// };\r\n\t// return {\r\n\t// \tLiveStreamData,\r\n\t// \thtml5player,\r\n\t// \tformat,\r\n\t// \tvideo_details,\r\n\t// \trelated_videos: related,\r\n\t// };\r\n}\r\n\r\n/**\r\n * Searches for a YouTube video or playlist and returns an array of {@link MusicTrack} or {@link MusicPlaylist}\r\n * Some code was ripped from play-dl\r\n */\r\nexport async function YouTubeSearch(\r\n\tquery: string,\r\n\tlimit: number,\r\n\ttype: \"video\" | \"playlist\" = \"video\"\r\n): Promise<BarbaraType[]> {\r\n\tlet results: BarbaraType[] = [];\r\n\tlet url = `https://www.youtube.com/results?search_query=${encodeURIComponent(query)}`;\r\n\r\n\tif (url.indexOf(\"&sp=\") === -1) {\r\n\t\turl += \"&sp=\";\r\n\t\tswitch (type) {\r\n\t\t\tcase \"playlist\": {\r\n\t\t\t\turl += `EgIQAw%253D%253D`;\r\n\t\t\t}\r\n\t\t\tcase \"video\": {\r\n\t\t\t\turl += `EgIQAQ%253D%253D`;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.log(url);\r\n\r\n\tconst { data: html } = await axios\r\n\t\t.get(url, {\r\n\t\t\theaders: { \"accept-language\": \"en-US;q=0.9\" },\r\n\t\t})\r\n\t\t.catch((err: Error) => {\r\n\t\t\tthrow err;\r\n\t\t});\r\n\r\n\tif (html.includes(\"Our systems have detected unusual traffic from your computer network\"))\r\n\t\tthrow new Error(\"YouTube detected we're a bot\");\r\n\r\n\tconst data = JSON.parse(\r\n\t\thtml\r\n\t\t\t.split(\"var ytInitialData = \")?.[1]\r\n\t\t\t?.split(\";</script>\")[0]\r\n\t\t\t.split(/;\\s*(var|const|let)\\s/)[0]\r\n\t);\r\n\tconst items =\r\n\t\tdata.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents.flatMap(\r\n\t\t\t(s: any) => s.itemSectionRenderer?.contents\r\n\t\t);\r\n\tfor (const item of items) {\r\n\t\tif (limit && results.length >= limit) break;\r\n\t\tif (!item || (!item.videoRenderer && !item.channelRenderer && !item.playlistRenderer)) continue;\r\n\r\n\t\tif (isDebug()) console.log(type);\r\n\t\tswitch (type) {\r\n\t\t\tcase \"video\": {\r\n\t\t\t\tconst result = MusicTrackFromYouTubeSearch(item);\r\n\t\t\t\tif (result) results.push(result);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase \"playlist\": {\r\n\t\t\t\tconst result = MusicPlaylistFromYouTube(item);\r\n\t\t\t\tif (result) results.push(result);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unknown type\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (isDebug()) console.log(results);\r\n\treturn results;\r\n}\r\n"]}