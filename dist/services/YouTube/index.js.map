{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/YouTube/index.ts"],"names":[],"mappings":";;;;;;AAMA,kDAA0B;AAC1B,mCAA0E;AAC1E,yCAA0C;AAC1C,6CAA0C;AAE1C,MAAM,mBAAmB,GAAG,qCAAqC,CAAC;AAClE,MAAM,oBAAoB,GACzB,0IAA0I,CAAC;AAC5I,MAAM,iBAAiB,GACtB,gIAAgI,CAAC;AAK3H,KAAK,UAAU,YAAY,CAAC,GAAW;IAC7C,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IAEjB,IAAI,OAAO,CAAC;IACZ,IAAI,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC;QAAE,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SACpF,IAAI,GAAG,CAAC,QAAQ,CAAC,oBAAoB,CAAC;QAC1C,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/D,IAAI,GAAG,CAAC,QAAQ,CAAC,qBAAqB,CAAC;QAC3C,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAChE,IAAI,GAAG,CAAC,QAAQ,CAAC,4BAA4B,CAAC;QAClD,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;;QACvE,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvF,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,IAAA,eAAM,EAAC,uBAAuB,CAAC,kBAAkB,OAAO,aAAa,CAAC,CAAC;IAEzG,OAAO,IAAA,6BAAqB,EAAC,IAAI,CAAC,CAAC;AACpC,CAAC;AAhBD,oCAgBC;AAMM,KAAK,UAAU,cAAc,CACnC,KAAa,EACb,QAAgB,EAAE,EAClB,OAA6B,OAAO;IAEpC,IAAA,eAAQ,EAAC,0BAA0B,IAAA,eAAM,EAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;IACtE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAC7B,GAAG,IAAA,eAAM,EAAC,uBAAuB,CAAC,oBAAoB,kBAAkB,CAAC,KAAK,CAAC,SAAS,IAAI,EAAE,CAC9F,CAAC;IAEF,OAAO,IAAI,CAAC,GAAG,CAAC,6BAAqB,CAAC,CAAC;AACxC,CAAC;AAXD,wCAWC;AAKD,SAAgB,gBAAgB,CAAC,GAAW;IAC3C,IAAI,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC;QAAE,OAAO,IAAI,CAAC;IACjD,IAAI,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC;QAAE,OAAO,IAAI,CAAC;AAC/C,CAAC;AAHD,4CAGC","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module / YouTube\r\n */\r\n\r\nimport { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../lib\";\r\nimport axios from \"axios\";\r\nimport { MusicPlaylistFromYouTube, MusicTrackFromYouTube } from \"./parse\";\r\nimport { debugLog } from \"../../lib/util\";\r\nimport { getKey } from \"../../lib/config\";\r\n\r\nconst PLAYLIST_ID_PATTERN = /^(PL|UU|LL|RD|OL)[a-zA-Z\\d_-]{10,}$/;\r\nconst PLAYLIST_URL_PATTERN =\r\n\t/^((?:https?:)?\\/\\/)?(?:(?:www|m|music)\\.)?(youtube\\.com)\\/(?:(playlist|watch))(.*)?((\\?|\\&)list=)(PL|UU|LL|RD|OL)[a-zA-Z\\d_-]{10,}(.*)?$/;\r\nconst VIDEO_URL_PATTERN =\r\n\t/^((?:https?:)?\\/\\/)?(?:(?:www|m|music)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w\\-]+\\?v=|shorts\\/|embed\\/|v\\/)?)([\\w\\-]+)(\\S+)?$/;\r\n\r\n/**\r\n * Returns {@link MusicTrack} or {@link MusicPlaylist} from a given YouTube URL\r\n */\r\nexport async function YouTube_Info(url: string): Promise<MusicTrack | MusicPlaylist> {\r\n\turl = url.trim();\r\n\r\n\tlet videoId;\r\n\tif (url.includes(\"youtu.be/\")) videoId = url.split(\"youtu.be/\")[1].split(/(\\?|\\/|&)/)[0];\r\n\telse if (url.includes(\"youtube.com/embed/\"))\r\n\t\tvideoId = url.split(\"youtube.com/embed/\")[1].split(/(\\?|\\/|&)/)[0];\r\n\telse if (url.includes(\"youtube.com/shorts/\"))\r\n\t\tvideoId = url.split(\"youtube.com/shorts/\")[1].split(/(\\?|\\/|&)/)[0];\r\n\telse if (url.includes(\"youtube.com/playlist?list=\"))\r\n\t\tvideoId = url.split(\"youtube.com/playlist?list=\")[1].split(/(\\?|\\/|&)/)[0];\r\n\telse videoId = (url.split(\"watch?v=\")[1] ?? url.split(\"&v=\")[1]).split(/(\\?|\\/|&)/)[0];\r\n\r\n\tlet { data } = await axios.get(`${getKey(\"YOUTUBE_INVIDIOUSSITE\")}/api/v1/videos/${videoId}?local=true`);\r\n\r\n\treturn MusicTrackFromYouTube(data);\r\n}\r\n\r\n/**\r\n * Searches for a YouTube video or playlist and returns an array of {@link MusicTrack} or {@link MusicPlaylist}\r\n * Some code was ripped from play-dl\r\n */\r\nexport async function YouTube_Search(\r\n\tquery: string,\r\n\tlimit: number = 10,\r\n\ttype: \"video\" | \"playlist\" = \"video\"\r\n): Promise<MusicTrack[] | MusicPlaylist[]> {\r\n\tdebugLog(`Invidious API URL key: ${getKey(\"YOUTUBE_INVIDIOUSSITE\")}`);\r\n\tlet { data } = await axios.get(\r\n\t\t`${getKey(\"YOUTUBE_INVIDIOUSSITE\")}/api/v1/search?q=${encodeURIComponent(query)}&type=${type}`\r\n\t);\r\n\r\n\treturn data.map(MusicTrackFromYouTube);\r\n}\r\n\r\n/**\r\n * Check a URL and validate if it is a YouTube URL\r\n */\r\nexport function YouTube_Validate(url: string) {\r\n\tif (url.match(PLAYLIST_URL_PATTERN)) return true;\r\n\tif (url.match(VIDEO_URL_PATTERN)) return true;\r\n}\r\n"]}