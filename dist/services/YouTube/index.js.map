{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/YouTube/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Avoxel284 2022\n * Barbara Music Module / YouTube\n */\n\nimport { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../lib\";\nimport axios from \"axios\";\nimport {\n\tMusicPlaylistFromYouTube,\n\tMusicTrackFromYouTube,\n\tMusicTrackFromYouTubeSearch,\n} from \"./parse\";\nimport { debugLog } from \"../../lib/util\";\n\n/**\n * Returns {@link MusicTrack} or {@link MusicPlaylist} from a given YouTube URL\n * Some code was ripped from play-dl\n */\nexport async function YouTube(url: string): Promise<MusicTrack | MusicPlaylist> {\n\turl = url.trim();\n\t// if (!url.match(YOUTUBE_URL_PATTERN)) throw new Error(`Given URL is not a valid YouTube URL`);\n\n\tlet videoId;\n\tif (url.includes(\"youtu.be/\")) videoId = url.split(\"youtu.be/\")[1].split(/(\\?|\\/|&)/)[0];\n\telse if (url.includes(\"youtube.com/embed/\"))\n\t\tvideoId = url.split(\"youtube.com/embed/\")[1].split(/(\\?|\\/|&)/)[0];\n\telse if (url.includes(\"youtube.com/shorts/\"))\n\t\tvideoId = url.split(\"youtube.com/shorts/\")[1].split(/(\\?|\\/|&)/)[0];\n\telse videoId = (url.split(\"watch?v=\")[1] ?? url.split(\"&v=\")[1]).split(/(\\?|\\/|&)/)[0];\n\n\tif (!videoId) throw new Error(\"Given URL is not a valid YouTube URL\");\n\n\tconst { data: html } = await axios\n\t\t.get(`https://www.youtube.com/watch?v=${videoId}&has_verified=1`, {\n\t\t\theaders: {\n\t\t\t\t\"accept-language\": \"en-US;q=0.9\",\n\t\t\t\tCookie: \"\",\n\t\t\t\t\"User-Agent\":\n\t\t\t\t\t\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36\",\n\t\t\t},\n\t\t})\n\t\t.catch((err: Error) => {\n\t\t\tthrow err;\n\t\t});\n\n\tif (html.includes(\"Our systems have detected unusual traffic from your computer network.\"))\n\t\tthrow new Error(\"YouTube detected we're a bot.. thanks youtube.\");\n\n\treturn MusicTrackFromYouTube(html);\n}\n\n/**\n * Searches for a YouTube video or playlist and returns an array of {@link MusicTrack} or {@link MusicPlaylist}\n * Some code was ripped from play-dl\n */\nexport async function YouTubeSearch(\n\tquery: string,\n\tlimit: number = 10,\n\ttype: \"video\" | \"playlist\" = \"video\"\n): Promise<MusicTrack[] | MusicPlaylist[]> {\n\tlet results: any = [];\n\tlet url = `https://www.youtube.com/results?search_query=${encodeURIComponent(query)}`;\n\n\tif (url.indexOf(\"&sp=\") === -1) {\n\t\turl += \"&sp=\";\n\t\tswitch (type) {\n\t\t\tcase \"playlist\": {\n\t\t\t\turl += `EgIQAw%253D%253D`;\n\t\t\t}\n\t\t\tcase \"video\": {\n\t\t\t\turl += `EgIQAQ%253D%253D`;\n\t\t\t}\n\t\t}\n\t}\n\n\tdebugLog(url);\n\n\tconst { data: html } = await axios\n\t\t.get(url, {\n\t\t\theaders: { \"accept-language\": \"en-US;q=0.9\" },\n\t\t})\n\t\t.catch((err: Error) => {\n\t\t\tthrow err;\n\t\t});\n\n\tif (html.includes(\"Our systems have detected unusual traffic from your computer network\"))\n\t\tthrow new Error(\"YouTube detected we're a bot\");\n\n\tconst data = JSON.parse(\n\t\thtml\n\t\t\t.split(\"var ytInitialData = \")?.[1]\n\t\t\t?.split(\";</script>\")[0]\n\t\t\t.split(/;\\s*(var|const|let)\\s/)[0]\n\t);\n\tconst items =\n\t\tdata.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents.flatMap(\n\t\t\t(s: any) => s.itemSectionRenderer?.contents\n\t\t);\n\tfor (const item of items) {\n\t\tif (limit && results.length >= limit) break;\n\t\tif (!item || (!item.videoRenderer && !item.channelRenderer && !item.playlistRenderer)) continue;\n\n\t\tdebugLog(type);\n\t\tswitch (type) {\n\t\t\tcase \"video\": {\n\t\t\t\tconst result = MusicTrackFromYouTubeSearch(item);\n\t\t\t\tif (result) results.push(result);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"playlist\": {\n\t\t\t\tconst result = MusicPlaylistFromYouTube(item);\n\t\t\t\t// if (result) results.push(result);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unknown type\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tdebugLog(results);\n\treturn results;\n}\n"]}