{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/YouTube/index.ts"],"names":[],"mappings":";;;;;;AACA,kDAA0B;AAC1B,mCAA0E;AAKnE,KAAK,UAAU,OAAO,CAAC,GAAW;IACxC,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IACjB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC;QACrC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC5D,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK;SAC1B,GAAG,CAAC,6CAA6C,GAAG,cAAc,QAAQ,EAAE,CAAC;SAC7E,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACrB,MAAM,GAAG,CAAC;IACX,CAAC,CAAC,CAAC;IAEJ,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO;QAAE,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAC;SAC5D,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU;QAAE,OAAO,2BAA2B,CAAC,IAAI,CAAC,CAAC;;QACvE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC9D,CAAC;AAbD,0BAaC;AAKM,KAAK,UAAU,aAAa,CAClC,KAAa,EACb,KAAa,EACb,OAA6B,OAAO;IAEpC,IAAI,OAAO,GAAkB,EAAE,CAAC;IAChC,IAAI,GAAG,GAAG,gDAAgD,KAAK,EAAE,CAAC;IAElE,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/B,GAAG,IAAI,MAAM,CAAC;QACd,QAAQ,IAAI,EAAE;YACb,KAAK,UAAU,CAAC,CAAC;gBAChB,GAAG,IAAI,kBAAkB,CAAC;aAC1B;YACD,KAAK,OAAO,CAAC,CAAC;gBACb,GAAG,IAAI,kBAAkB,CAAC;aAC1B;SACD;KACD;IAED,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK;SAC1B,GAAG,CAAC,GAAG,EAAE;QACT,OAAO,EAAE,EAAE,iBAAiB,EAAE,aAAa,EAAE;KAC7C,CAAC;SACD,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACrB,MAAM,GAAG,CAAC;IACX,CAAC,CAAC,CAAC;IAEJ,IAAI,IAAI,CAAC,QAAQ,CAAC,sEAAsE,CAAC;QACxF,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAEjD,IAAI,IAAI,KAAK,OAAO;QAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAA,6BAAqB,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7F,IAAI,IAAI,KAAK,UAAU;QAC3B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAA,gCAAwB,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3E;QACJ,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACpD;IAED,OAAO,OAAO,CAAC;AAChB,CAAC;AAvCD,sCAuCC","sourcesContent":["import { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../classes\";\r\nimport axios from \"axios\";\r\nimport { MusicPlaylistFromYouTube, MusicTrackFromYouTube } from \"./parse\";\r\n\r\n/**\r\n * Returns MusicTrack or MusicPlaylist with information from YouTube\r\n */\r\nexport async function YouTube(url: string): Promise<MusicTrack | MusicPlaylist> {\r\n\turl = url.trim();\r\n\tif (!url.match(SOUNDCLOUD_URL_PATTERN))\r\n\t\tthrow new Error(`Given URL is not a valid SoundCloud URL`);\r\n\tconst { data } = await axios\r\n\t\t.get(`https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${clientId}`)\r\n\t\t.catch((err: Error) => {\r\n\t\t\tthrow err;\r\n\t\t});\r\n\r\n\tif (data.kind === \"track\") return MusicTrackFromSoundCloud(data);\r\n\telse if (data.kind === \"playlist\") return MusicPlaylistFromSoundCloud(data);\r\n\telse throw new Error(\"SoundCloud returned unknown resource\");\r\n}\r\n\r\n/**\r\n * Searches for a YouTube video or playlist\r\n */\r\nexport async function YouTubeSearch(\r\n\tquery: string,\r\n\tlimit: number,\r\n\ttype: \"video\" | \"playlist\" = \"video\"\r\n): Promise<BarbaraType[]> {\r\n\tlet results: BarbaraType[] = [];\r\n\tlet url = `https://www.youtube.com/results?search_query=${query}`;\r\n\r\n\tif (url.indexOf(\"&sp=\") === -1) {\r\n\t\turl += \"&sp=\";\r\n\t\tswitch (type) {\r\n\t\t\tcase \"playlist\": {\r\n\t\t\t\turl += `EgIQAw%253D%253D`;\r\n\t\t\t}\r\n\t\t\tcase \"video\": {\r\n\t\t\t\turl += `EgIQAQ%253D%253D`;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst { data } = await axios\r\n\t\t.get(url, {\r\n\t\t\theaders: { \"accept-language\": \"en-US;q=0.9\" },\r\n\t\t})\r\n\t\t.catch((err: Error) => {\r\n\t\t\tthrow err;\r\n\t\t});\r\n\r\n\tif (data.contains(\"Our systems have detected unusual traffic from your computer network\"))\r\n\t\tthrow new Error(\"YouTube detected we're a bot\");\r\n\r\n\tif (type === \"video\") data.collection.forEach((d: any) => results.push(MusicTrackFromYouTube(d)));\r\n\telse if (type === \"playlist\")\r\n\t\tdata.collection.forEach((d: any) => results.push(MusicPlaylistFromYouTube(d)));\r\n\telse {\r\n\t\tthrow new Error(\"Unknown SoundCloud resource type\");\r\n\t}\r\n\r\n\treturn results;\r\n}\r\n"]}