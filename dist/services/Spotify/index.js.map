{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/Spotify/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module / Spotify\r\n */\r\n\r\nimport { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../lib\";\r\nimport axios from \"axios\";\r\nimport { MusicTrackFromSpotify, MusicPlaylistFromSpotify } from \"./parse\";\r\nimport { getKey, setKey } from \"../../lib/config\";\r\nimport { debugLog } from \"../../lib/util\";\r\n\r\n/** URL pattern for Spotify - ripped from play-dl */\r\nexport const SPOTIFY_URL_PATTERN = /^((https:)?\\/\\/)?open.spotify.com\\/(track|album|playlist)\\//;\r\n\r\n/**\r\n * Returns {@link MusicTrack} or {@link MusicPlaylist} with data from Spotify from a given resource URL\r\n */\r\nexport async function Spotify_Info(url: string): Promise<MusicTrack | MusicPlaylist> {\r\n\turl = url.trim();\r\n\tif (!url.match(SPOTIFY_URL_PATTERN)) throw new Error(`Given URL is not a valid Spotify URL`);\r\n\r\n\tif (url.includes(\"track/\")) {\r\n\t\tconst trackId = url.split(\"track/\")[1].split(\"&\")[0].split(\"?\")[0];\r\n\t\tconst { data } = await axios\r\n\t\t\t.get(`https://api.spotify.com/v1/tracks/${trackId}?market=${getKey(\"SPOTIFY_MARKETCODE\")}`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `${getKey(\"SPOTIFY_TOKENTYPE\")} ${getKey(\"SPOTIFY_ACCESSTOKEN\")}`,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tthrow err;\r\n\t\t\t});\r\n\r\n\t\treturn MusicTrackFromSpotify(data);\r\n\t}\r\n\r\n\tif (url.includes(\"playlist/\")) {\r\n\t\tconst playlistId = url.split(\"playlist/\")[1].split(\"&\")[0].split(\"?\")[0];\r\n\t\tconst { data } = await axios\r\n\t\t\t.get(\r\n\t\t\t\t`https://api.spotify.com/v1/playlists/${playlistId}?market=${getKey(\"SPOTIFY_MARKETCODE\")}`,\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `${getKey(\"SPOTIFY_TOKENTYPE\")} ${getKey(\"SPOTIFY_ACCESSTOKEN\")}`,\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tthrow err;\r\n\t\t\t});\r\n\r\n\t\treturn await MusicPlaylistFromSpotify(data);\r\n\t}\r\n\r\n\tif (url.includes(\"album/\")) {\r\n\t\tconst albumID = url.split(\"album/\")[1].split(\"&\")[0].split(\"?\")[0];\r\n\t\tconst { data } = await axios\r\n\t\t\t.get(`https://api.spotify.com/v1/albums/${albumID}?market=${getKey(\"SPOTIFY_MARKETCODE\")}`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `${getKey(\"SPOTIFY_TOKENTYPE\")} ${getKey(\"SPOTIFY_ACCESSTOKEN\")}`,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tthrow err;\r\n\t\t\t});\r\n\r\n\t\treturn await MusicPlaylistFromSpotify(data, true);\r\n\t}\r\n\r\n\tthrow new Error(\"Spotify returned unknown resource.\");\r\n}\r\n\r\n/**\r\n * Searches for a Spotify track or playlist and returns with an array of {@link MusicTrack} or {@link MusicPlaylist}\r\n */\r\nexport async function Spotify_Search(\r\n\tquery: string,\r\n\tlimit: number = 5,\r\n\ttype: \"track\" | \"playlist\" | \"album\" = \"track\"\r\n) {\r\n\tif (!query) throw new Error(\"No query given!\");\r\n\tif (limit > 50 || limit < 0) throw \"Limit is out of range for Spotify (0 - 50)\";\r\n\r\n\tconst { data } = await axios\r\n\t\t.get(\r\n\t\t\t`https://api.spotify.com/v1/search?type=${type}&q=${query}&limit=${limit}&market=${getKey(\r\n\t\t\t\t\"SPOTIFY_MARKETCODE\"\r\n\t\t\t)}`,\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `${getKey(\"SPOTIFY_TOKENTYPE\")} ${getKey(\"SPOTIFY_ACCESSTOKEN\")}`,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t)\r\n\t\t.catch((err) => {\r\n\t\t\tthrow err;\r\n\t\t});\r\n\r\n\tdebugLog(`Spotify search data:`, data);\r\n\r\n\tif (type === \"track\") {\r\n\t\treturn data.tracks.items.map((d: any) => MusicTrackFromSpotify(d));\r\n\t}\r\n\r\n\tif (type === \"playlist\") {\r\n\t\treturn data.playlist.items.map((d: any) => MusicPlaylistFromSpotify(d));\r\n\t}\r\n\r\n\tif (type === \"album\") {\r\n\t\treturn data.albums.items.map((d: any) => MusicPlaylistFromSpotify(d, true));\r\n\t}\r\n\r\n\tthrow new Error(\"Spotify returned unknown resource.\");\r\n}\r\n\r\n/**\r\n * Check a URL and validate if it is a Spotify URL\r\n */\r\nexport function Spotify_Validate(url: string) {\r\n\treturn url.match(SPOTIFY_URL_PATTERN);\r\n}\r\n"]}