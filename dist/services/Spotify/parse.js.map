{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../src/services/Spotify/parse.ts"],"names":[],"mappings":";;;;;;AAKA,kDAA0B;AAC1B,mCAA+D;AAC/D,6CAA0C;AAE1C,SAAgB,qBAAqB,CAAC,IAAS;IAC9C,OAAO,IAAI,gBAAU,CAAC;QACrB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO;QAC/B,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI;QACzC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE;YACxC,OAAO;gBACN,GAAG,EAAE,MAAM,CAAC,aAAa,CAAC,OAAO;gBACjC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,EAAE,EAAE,MAAM,CAAC,EAAE;aACb,CAAC;QACH,CAAC,CAAC;QACF,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG;QACxC,OAAO,EAAE,aAAO,CAAC,OAAO;QACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,YAAY,EAAE,IAAI;KAClB,CAAC,CAAC;AACJ,CAAC;AAlBD,sDAkBC;AAEM,KAAK,UAAU,wBAAwB,CAAC,IAAS,EAAE,UAAmB,KAAK;IACjF,MAAM,WAAW,GAAG,KAAK,EAAE,WAAoB,EAAE,EAAE;QAClD,IAAI,WAAW,EAAE;YAChB,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,WAAW,EAAE;gBAC3C,OAAO,EAAE;oBACR,aAAa,EAAE,GAAG,IAAA,eAAM,EAAC,mBAAmB,CAAC,IAAI,IAAA,eAAM,EAAC,qBAAqB,CAAC,EAAE;iBAChF;aACD,CAAC,CAAC;YACH,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI;gBAAE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAErD,OAAO,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;gBACxC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;SACH;aAAM;YACN,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI;gBAAE,MAAM,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE3D,OAAO,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;gBACxC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;SACH;IACF,CAAC,CAAC;IAEF,OAAO,IAAI,mBAAa,CAAC;QACxB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO;QAC/B,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI;QACzC,OAAO,EAAE;YACR,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO;YACrC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;YAC7B,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;SACjB;QACD,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG;QACjC,OAAO,EAAE,aAAO,CAAC,OAAO;QACxB,OAAO,EAAE,OAAO;QAIhB,MAAM,EAAE,EAAE;QACV,YAAY,EAAE,IAAI;KAClB,CAAC,CAAC;AACJ,CAAC;AAzCD,4DAyCC","sourcesContent":["/**\r\n * Avoxel284 2022\r\n * Barbara Music Module / Spotify\r\n */\r\n\r\nimport axios from \"axios\";\r\nimport { MusicPlaylist, MusicTrack, Service } from \"../../lib\";\r\nimport { getKey } from \"../../lib/config\";\r\n\r\nexport function MusicTrackFromSpotify(data: any) {\r\n\treturn new MusicTrack({\r\n\t\tname: data.name,\r\n\t\turl: data.external_urls.spotify,\r\n\t\tid: data.id,\r\n\t\tduration: Number(data.duration_ms) / 1000,\r\n\t\tauthor: data.artists.map((artist: any) => {\r\n\t\t\treturn {\r\n\t\t\t\turl: artist.external_urls.spotify,\r\n\t\t\t\tname: artist.name,\r\n\t\t\t\tid: artist.id,\r\n\t\t\t};\r\n\t\t}),\r\n\t\tthumbnail: data?.album?.images?.[0]?.url,\r\n\t\tservice: Service.spotify,\r\n\t\texplicit: data.explicit,\r\n\t\toriginalData: data,\r\n\t});\r\n}\r\n\r\nexport async function MusicPlaylistFromSpotify(data: any, isAlbum: boolean = false) {\r\n\tconst fetchTracks = async (nextPageUrl?: string) => {\r\n\t\tif (nextPageUrl) {\r\n\t\t\tlet { data } = await axios.get(nextPageUrl, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `${getKey(\"SPOTIFY_TOKENTYPE\")} ${getKey(\"SPOTIFY_ACCESSTOKEN\")}`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tif (data.tracks?.next) fetchTracks(data.tracks.next);\r\n\r\n\t\t\treturn data?.tracks.items.map((d: any) => {\r\n\t\t\t\tMusicTrackFromSpotify(d);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (data.tracks?.next) await fetchTracks(data.tracks.next);\r\n\r\n\t\t\treturn data?.tracks.items.map((d: any) => {\r\n\t\t\t\tMusicTrackFromSpotify(d);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\treturn new MusicPlaylist({\r\n\t\tname: data.name,\r\n\t\turl: data.external_urls.spotify,\r\n\t\tid: data.id,\r\n\t\tduration: Number(data.duration_ms) / 1000,\r\n\t\tauthors: {\r\n\t\t\turl: data.owner.external_urls.spotify,\r\n\t\t\tname: data.owner.display_name,\r\n\t\t\tid: data.owner.id,\r\n\t\t},\r\n\t\tthumbnail: data?.images?.[0]?.url,\r\n\t\tservice: Service.spotify,\r\n\t\tisAlbum: isAlbum,\r\n\t\t// TODO: possibly convert to map?\r\n\t\t// TODO: tracks in playlist- check api\r\n\t\t// tracks: await fetchTracks(),\r\n\t\ttracks: [],\r\n\t\toriginalData: data,\r\n\t});\r\n}\r\n"]}