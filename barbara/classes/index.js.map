{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/classes/index.ts"],"names":[],"mappings":";;;AAAA,kCAA6C;AAe7C,IAAY,OASX;AATD,WAAY,OAAO;IAElB,8BAAmB,CAAA;IAEnB,8BAAmB,CAAA;IAEnB,oCAAyB,CAAA;IAEzB,kCAAuB,CAAA;AACxB,CAAC,EATW,OAAO,GAAP,eAAO,KAAP,eAAO,QASlB;AAkCD,MAAa,UAAU;IAiDtB,YAAY,OAAY,EAAE;QACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,oBAAoB,CAAC;QAC9C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,iBAAiB,GAAG,IAAA,yBAAkB,EAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,CAAC;CACD;AA9DD,gCA8DC;AAED,MAAa,aAAa;IAgBzB,YAAY,OAAY,EAAE;QACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC3B,CAAC;CACD;AAtBD,sCAsBC","sourcesContent":["import { getTimeFromSeconds } from \"../util\";\n\nexport interface SearchOptions {\n\t/** Service to search track on */\n\tservice: Service;\n}\n\nexport interface InfoOptions {\n\t/** Amount of results to return */\n\tlength: number;\n}\n\n/** Type of media - Is it a MusicTrack or MusicPlaylist? */\nexport type BarbaraType = MusicTrack | MusicPlaylist;\n\nexport enum Service {\n\t/** Spotify */\n\tspotify = \"spotify\",\n\t/** YouTube */\n\tyoutube = \"youtube\",\n\t/** SoundCloud */\n\tsoundcloud = \"soundcloud\",\n\t/** Audio File */\n\taudiofile = \"audiofile\",\n}\n\n/** An audio format */\ninterface Audio {\n\t/** Audio URL */\n\turl?: string;\n\t/** Audio quality */\n\tquality?: string;\n\t/** Audio duration **in seconds** */\n\tduration?: number;\n\t/** Audio protocol */\n\tprotocol?: string;\n\t/** Audio mime type */\n\tmimeType?: string;\n}\n\ninterface Thumbnail {\n\t/** Thumbnail URL */\n\turl: string;\n}\n\ninterface Author {\n\t/** Public page URL */\n\turl?: string;\n\t/** Avatar/Profile picture/Channel icon URL */\n\tavatar?: string;\n\t/** Name of author */\n\tname?: string;\n\t/** ID of author */\n\tid?: string;\n\t/** Is the author verified? */\n\tverified?: boolean;\n}\n\nexport class MusicTrack {\n\t/** Friendly URL of the track (e.g. https://youtube.com/watch?v=videoid) */\n\turl: string;\n\n\t/** Name of the track */\n\tname: string;\n\n\t/** ID of user that queued/played the track */\n\tqueuedBy?: string;\n\n\t/** Duration of the track **in seconds** */\n\tduration: number;\n\n\t/** Duration of the track **in timestamp** */\n\tdurationTimestamp?: string;\n\n\t/** Has the track been playlisted? */\n\tplaylisted: boolean;\n\n\t/** Service providing track */\n\tservice?: Service;\n\n\t/** Thumbnail of the track */\n\tthumbnail?: Thumbnail;\n\n\t/** Array of media urls */\n\taudio?: Array<Audio>;\n\n\t/** Author of music track. For example, a YouTube channel or SoundCloud user profile */\n\tauthor?: Author;\n\n\t/**\n\t * Original data retreieved from request to service's API.\n\t * There for debug and if theres any metadata not included in MusicTrack itself.\n\t */\n\toriginalData?: any;\n\n\t/**\n\t * An object that represents a music track\n\t *\n\t * @param {Object} data Internal data parameter, will come back to this later\n\t * @example\n\t * ```\n\t * let Track = new MusicTrack();\n\t * console.log(Track.url);\n\t * console.log(Track.name);\n\t * console.log(Tack.duration);\n\t * ```\n\t */\n\tconstructor(data: any = {}) {\n\t\tthis.url = data.url || \"\";\n\t\tthis.name = data.name || \"Unnamed MusicTrack\";\n\t\tthis.thumbnail = data.thumbnail;\n\t\tthis.queuedBy = data.queuedBy;\n\t\tthis.duration = data.duration || 0;\n\t\tthis.durationTimestamp = getTimeFromSeconds(data.duration || 0);\n\t\tthis.playlisted = data.playlisted || false;\n\t\tthis.service = data.service;\n\t\tthis.audio = data.audio;\n\t\tthis.author = data.author;\n\t\tthis.originalData = data.originalData;\n\t}\n}\n\nexport class MusicPlaylist {\n\t/** Friendly URL of the playlist */\n\turl?: string;\n\n\t/** Name of the playlist */\n\tname?: string;\n\n\t/** Is the playlist an album? */\n\tisAlbum?: boolean;\n\n\t/** Array of MusicTracks in playlist */\n\ttracks?: Array<MusicTrack>;\n\n\t/** Author of playlist. For example, a YouTube channel or SoundCloud user profile */\n\tauthor?: Author;\n\n\tconstructor(data: any = {}) {\n\t\tthis.url = data.url;\n\t\tthis.name = data.name;\n\t\tthis.isAlbum = data.isAlbum;\n\t\tthis.tracks = data.tracks;\n\t}\n}\n"]}