{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/SoundCloud/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BarbaraType, MusicPlaylist, MusicTrack, Service } from \"../../classes\";\nconst axios = require(\"axios\").default;\n\nlet clientId = \"\";\n\n/** URL pattern for SoundCloud - ripped from play-dl */\nconst SOUNDCLOUD_URL_PATTERN =\n\t/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?(api\\.soundcloud\\.com|soundcloud\\.com|snd\\.sc)\\/(.*)$/;\n\n/**\n * Returns a free client ID - ripped from play-dl\n */\nexport async function getClientId(): Promise<string> {\n\tconst { data } = await axios.get(\"https://soundcloud.com/\").catch((err: Error) => {\n\t\tthrow err;\n\t});\n\tconst urls: string[] = [];\n\tdata.split('<script crossorigin src=\"').forEach((r: string) => {\n\t\tif (r.startsWith(\"https\")) urls.push(r.split('\"')[0]);\n\t});\n\tconst { data: data2 } = await axios.get(urls[urls.length - 1]).catch((err: Error) => {\n\t\tthrow err;\n\t});\n\treturn data2.split(',client_id:\"')[1].split('\"')[0];\n}\n\n/**\n * Returns MusicTrack or MusicPlaylist with information from SoundCloud\n */\nexport async function SoundCloud(url: string): Promise<BarbaraType> {\n\tclientId = await getClientId();\n\tconsole.log(clientId);\n\n\turl = url.trim();\n\tif (!url.match(SOUNDCLOUD_URL_PATTERN))\n\t\tthrow new Error(`Given URL is not a valid SoundCloud URL`);\n\tconst { data } = await axios\n\t\t.get(`https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${clientId}`)\n\t\t.catch((err: Error) => {\n\t\t\tthrow err;\n\t\t});\n\n\tif (data.kind === \"track\") {\n\t\treturn new MusicTrack({\n\t\t\tname: data.title,\n\t\t\turl: data.permalink_url,\n\t\t\tduration: Number(data.duration) / 1000,\n\t\t\tauthor: {\n\t\t\t\turl: data.user.permalink_url,\n\t\t\t\tname: data.user.username,\n\t\t\t\tavatar: data.user.avatar_url,\n\t\t\t\tid: data.user.id,\n\t\t\t\tverified: data?.user?.verified,\n\t\t\t},\n\t\t\tthumbnail: { url: data.artwork_url },\n\t\t\tservice: Service.soundcloud,\n\t\t\taudio: await data.media.transcodings.map(async (a: any) => {\n\t\t\t\t// let { data: mediaData } = await axios.get(a.url + `?client_id=${clientId}`);\n\t\t\t\t// console.log(mediaData.url);\n\t\t\t\treturn {\n\t\t\t\t\turl: a.url + `?client_id=${clientId}`,\n\t\t\t\t\tquality: a.quality,\n\t\t\t\t\tduration: a.duration,\n\t\t\t\t\tprotocol: a.format.protocol,\n\t\t\t\t\tmimeType: a.format.mime_type,\n\t\t\t\t};\n\t\t\t}),\n\t\t\toriginalData: data,\n\t\t});\n\t} else if (data.kind === \"playlist\") {\n\t\treturn new MusicPlaylist({\n\t\t\tname: data.title,\n\t\t\turl: data.permalink_url,\n\t\t\tduration: Number(data.duration) / 1000,\n\t\t\tauthor: {\n\t\t\t\turl: data.user.permalink_url,\n\t\t\t\tname: data.user.username,\n\t\t\t\tavatar: data.user.avatar_url,\n\t\t\t\tid: data.user.id,\n\t\t\t},\n\t\t\tthumbnail: { url: data.artwork_url },\n\t\t\tservice: Service.soundcloud,\n\t\t});\n\t} else {\n\t\tthrow new Error(\"SoundCloud returned unknown resource\");\n\t}\n}\n"]}